

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue May 23 17:29:26 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35  0000                     
    36                           ; Version 1.40
    37                           ; Generated 01/12/2016 GMT
    38                           ; 
    39                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4550 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	idataBANK0
    72  000FC8                     __pidataBANK0:
    73                           	opt stack 0
    74                           
    75                           ;initializer for main@F3898
    76  000FC8  53                 	db	83
    77  000FC9  4D                 	db	77
    78  000FCA  54                 	db	84
    79  000FCB  57                 	db	87
    80  000FCC  74                 	db	116
    81  000FCD  46                 	db	70
    82  000FCE  73                 	db	115
    83                           
    84                           	psect	smallconst
    85  000800                     __psmallconst:
    86                           	opt stack 0
    87  000800  00                 	db	0
    88  000801                     _hexpowers:
    89                           	opt stack 0
    90  000801  0001               	dw	1
    91  000803  0010               	dw	16
    92  000805  0100               	dw	256
    93  000807  1000               	dw	4096
    94  000809                     __end_of_hexpowers:
    95                           	opt stack 0
    96  0000                     _LATD	set	3980
    97  0000                     _OSCCON	set	4051
    98  0000                     _SSPADD	set	4040
    99  0000                     _SSPBUF	set	4041
   100  0000                     _SSPCON1	set	4038
   101  0000                     _SSPCON2	set	4037
   102  0000                     _SSPCON2bits	set	4037
   103  0000                     _SSPSTAT	set	4039
   104  0000                     _SSPSTATbits	set	4039
   105  0000                     _TRISD	set	3989
   106  0000                     _ACKDT	set	32301
   107  0000                     _ACKEN	set	32300
   108  0000                     _ACKSTAT	set	32302
   109  0000                     _LATD2	set	31842
   110  0000                     _LATD3	set	31843
   111  0000                     _PEN	set	32298
   112  0000                     _RCEN	set	32299
   113  0000                     _RSEN	set	32297
   114  0000                     _SSPIE	set	31979
   115  0000                     _SSPIF	set	31987
   116  0000                     _TRISB0	set	31896
   117  0000                     _TRISB1	set	31897
   118  000809                     STR_19:
   119  000809  30                 	db	48	;'0'
   120  00080A  31                 	db	49	;'1'
   121  00080B  32                 	db	50	;'2'
   122  00080C  33                 	db	51	;'3'
   123  00080D  34                 	db	52	;'4'
   124  00080E  35                 	db	53	;'5'
   125  00080F  36                 	db	54	;'6'
   126  000810  37                 	db	55	;'7'
   127  000811  38                 	db	56	;'8'
   128  000812  39                 	db	57	;'9'
   129  000813  61                 	db	97	;'a'
   130  000814  62                 	db	98	;'b'
   131  000815  63                 	db	99	;'c'
   132  000816  64                 	db	100	;'d'
   133  000817  65                 	db	101	;'e'
   134  000818  66                 	db	102	;'f'
   135  000819  00                 	db	0
   136  00081A                     STR_9:
   137  00081A  43                 	db	67	;'C'
   138  00081B  61                 	db	97	;'a'
   139  00081C  6C                 	db	108	;'l'
   140  00081D  20                 	db	32
   141  00081E  25                 	db	37
   142  00081F  78                 	db	120	;'x'
   143  000820  2D                 	db	45
   144  000821  00                 	db	0
   145  000822                     STR_5:
   146  000822  54                 	db	84	;'T'
   147  000823  69                 	db	105	;'i'
   148  000824  6D                 	db	109	;'m'
   149  000825  3A                 	db	58	;':'
   150  000826  25                 	db	37
   151  000827  78                 	db	120	;'x'
   152  000828  3A                 	db	58	;':'
   153  000829  00                 	db	0
   154  00082A                     STR_3:
   155  00082A  25                 	db	37
   156  00082B  78                 	db	120	;'x'
   157  00082C  20                 	db	32
   158  00082D  00                 	db	0
   159  00082E                     STR_15:
   160  00082E  57                 	db	87	;'W'
   161  00082F  65                 	db	101	;'e'
   162  000830  64                 	db	100	;'d'
   163  000831  00                 	db	0
   164  000832                     STR_14:
   165  000832  54                 	db	84	;'T'
   166  000833  75                 	db	117	;'u'
   167  000834  65                 	db	101	;'e'
   168  000835  00                 	db	0
   169  000836                     STR_17:
   170  000836  46                 	db	70	;'F'
   171  000837  72                 	db	114	;'r'
   172  000838  69                 	db	105	;'i'
   173  000839  00                 	db	0
   174  00083A                     STR_13:
   175  00083A  4D                 	db	77	;'M'
   176  00083B  6F                 	db	111	;'o'
   177  00083C  6E                 	db	110	;'n'
   178  00083D  00                 	db	0
   179  00083E                     STR_12:
   180  00083E  53                 	db	83	;'S'
   181  00083F  75                 	db	117	;'u'
   182  000840  6E                 	db	110	;'n'
   183  000841  00                 	db	0
   184  000842                     STR_18:
   185  000842  53                 	db	83	;'S'
   186  000843  61                 	db	97	;'a'
   187  000844  74                 	db	116	;'t'
   188  000845  00                 	db	0
   189  000846                     STR_16:
   190  000846  54                 	db	84	;'T'
   191  000847  68                 	db	104	;'h'
   192  000848  75                 	db	117	;'u'
   193  000849  00                 	db	0
   194  00084A                     STR_2:
   195  00084A  41                 	db	65	;'A'
   196  00084B  4D                 	db	77	;'M'
   197  00084C  00                 	db	0
   198  00084D                     STR_1:
   199  00084D  50                 	db	80	;'P'
   200  00084E  4D                 	db	77	;'M'
   201  00084F  00                 	db	0
   202  0000                     
   203                           ; #config settings
   204  000850  00                 	db	0	; dummy byte at the end
   205  0000                     
   206                           	psect	cinit
   207  000E36                     __pcinit:
   208                           	opt stack 0
   209  000E36                     start_initialization:
   210                           	opt stack 0
   211  000E36                     __initialization:
   212                           	opt stack 0
   213                           
   214                           ; Initialize objects allocated to BANK0 (7 bytes)
   215                           ; load TBLPTR registers with __pidataBANK0
   216  000E36  0EC8               	movlw	low __pidataBANK0
   217  000E38  6EF6               	movwf	tblptrl,c
   218  000E3A  0E0F               	movlw	high __pidataBANK0
   219  000E3C  6EF7               	movwf	tblptrh,c
   220  000E3E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   221  000E40  6EF8               	movwf	tblptru,c
   222  000E42  EE00  F06C         	lfsr	0,__pdataBANK0
   223  000E46  EE10 F007          	lfsr	1,7
   224  000E4A                     copy_data0:
   225  000E4A  0009               	tblrd		*+
   226  000E4C  CFF5 FFEE          	movff	tablat,postinc0
   227  000E50  50E5               	movf	postdec1,w,c
   228  000E52  50E1               	movf	fsr1l,w,c
   229  000E54  E1FA               	bnz	copy_data0
   230                           
   231                           ; Clear objects allocated to BANK0 (12 bytes)
   232  000E56  EE00  F060         	lfsr	0,__pbssBANK0
   233  000E5A  0E0C               	movlw	12
   234  000E5C                     clear_0:
   235  000E5C  6AEE               	clrf	postinc0,c
   236  000E5E  06E8               	decf	wreg,f,c
   237  000E60  E1FD               	bnz	clear_0
   238                           
   239                           ; Clear objects allocated to COMRAM (2 bytes)
   240  000E62  6A5F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   241  000E64  6A5E               	clrf	__pbssCOMRAM& (0+255),c
   242  000E66                     end_of_initialization:
   243                           	opt stack 0
   244  000E66                     __end_of__initialization:
   245                           	opt stack 0
   246  000E66  0E00               	movlw	low (__Lmediumconst shr (0+16))
   247  000E68  6EF8               	movwf	tblptru,c
   248  000E6A  0100               	movlb	0
   249  000E6C  EF29  F004         	goto	_main	;jump to C main() function
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           tblptrl	equ	0xFF6
   253                           tablat	equ	0xFF5
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           postdec1	equ	0xFE5
   257                           fsr1l	equ	0xFE1
   258                           
   259                           	psect	bssCOMRAM
   260  00005E                     __pbssCOMRAM:
   261                           	opt stack 0
   262  00005E                     _hour:
   263                           	opt stack 0
   264  00005E                     	ds	2
   265                           tblptru	equ	0xFF8
   266                           tblptrh	equ	0xFF7
   267                           tblptrl	equ	0xFF6
   268                           tablat	equ	0xFF5
   269                           postinc0	equ	0xFEE
   270                           wreg	equ	0xFE8
   271                           postdec1	equ	0xFE5
   272                           fsr1l	equ	0xFE1
   273                           
   274                           	psect	bssBANK0
   275  000060                     __pbssBANK0:
   276                           	opt stack 0
   277  000060                     _Date:
   278                           	opt stack 0
   279  000060                     	ds	2
   280  000062                     _Day:
   281                           	opt stack 0
   282  000062                     	ds	2
   283  000064                     _Month:
   284                           	opt stack 0
   285  000064                     	ds	2
   286  000066                     _Year:
   287                           	opt stack 0
   288  000066                     	ds	2
   289  000068                     _min:
   290                           	opt stack 0
   291  000068                     	ds	2
   292  00006A                     _sec:
   293                           	opt stack 0
   294  00006A                     	ds	2
   295                           tblptru	equ	0xFF8
   296                           tblptrh	equ	0xFF7
   297                           tblptrl	equ	0xFF6
   298                           tablat	equ	0xFF5
   299                           postinc0	equ	0xFEE
   300                           wreg	equ	0xFE8
   301                           postdec1	equ	0xFE5
   302                           fsr1l	equ	0xFE1
   303                           
   304                           	psect	dataBANK0
   305  00006C                     __pdataBANK0:
   306                           	opt stack 0
   307  00006C                     main@F3898:
   308                           	opt stack 0
   309  00006C                     	ds	7
   310                           tblptru	equ	0xFF8
   311                           tblptrh	equ	0xFF7
   312                           tblptrl	equ	0xFF6
   313                           tablat	equ	0xFF5
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           postdec1	equ	0xFE5
   317                           fsr1l	equ	0xFE1
   318                           
   319                           	psect	cstackCOMRAM
   320  000001                     __pcstackCOMRAM:
   321                           	opt stack 0
   322  000001                     ?___lwdiv:
   323                           	opt stack 0
   324  000001                     I2C_Read@flag:
   325                           	opt stack 0
   326  000001                     I2C_Write@data:
   327                           	opt stack 0
   328  000001                     MSdelay@val:
   329                           	opt stack 0
   330  000001                     ___lwdiv@dividend:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x0
   334  000001                     	ds	1
   335  000002                     I2C_Read@buffer:
   336                           	opt stack 0
   337  000002                     I2C_Start@slave_write_address:
   338                           	opt stack 0
   339  000002                     I2C_Repeated_Start@slave_read_address:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x1
   343  000002                     	ds	1
   344  000003                     ??_RTC_Read_Clock:
   345  000003                     ??_RTC_Read_Calendar:
   346  000003                     MSdelay@i:
   347                           	opt stack 0
   348  000003                     ___lwdiv@divisor:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x2
   352  000003                     	ds	1
   353  000004                     RTC_Read_Clock@read_clock_address:
   354                           	opt stack 0
   355  000004                     RTC_Read_Calendar@read_calendar_address:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x3
   359  000004                     	ds	1
   360  000005                     MSdelay@j:
   361                           	opt stack 0
   362  000005                     ___lwdiv@quotient:
   363                           	opt stack 0
   364                           
   365                           ; 2 bytes @ 0x4
   366  000005                     	ds	2
   367  000007                     ??_LCD_Command:
   368  000007                     ??_LCD_Char:
   369  000007                     ___lwdiv@counter:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x6
   373  000007                     	ds	1
   374  000008                     ?_sprintf:
   375                           	opt stack 0
   376  000008                     LCD_Command@cmd:
   377                           	opt stack 0
   378  000008                     LCD_Char@dat:
   379                           	opt stack 0
   380  000008                     sprintf@sp:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x7
   384  000008                     	ds	1
   385  000009                     LCD_String@msg:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x8
   389  000009                     	ds	1
   390  00000A                     sprintf@f:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x9
   394  00000A                     	ds	1
   395  00000B                     LCD_String_xy@pos:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0xA
   399  00000B                     	ds	1
   400  00000C                     LCD_String_xy@msg:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0xB
   404  00000C                     	ds	2
   405  00000E                     LCD_String_xy@row:
   406                           	opt stack 0
   407  00000E                     sprintf@flag:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0xD
   411  00000E                     	ds	1
   412  00000F                     LCD_String_xy@location:
   413                           	opt stack 0
   414  00000F                     sprintf@ap:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0xE
   418  00000F                     	ds	2
   419  000011                     sprintf@idx:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x10
   423  000011                     	ds	1
   424  000012                     sprintf@val:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x11
   428  000012                     	ds	2
   429  000014                     sprintf@prec:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x13
   433  000014                     	ds	1
   434  000015                     sprintf@c:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x14
   438  000015                     	ds	1
   439  000016                     ??_main:
   440                           
   441                           ; 1 bytes @ 0x15
   442  000016                     	ds	3
   443  000019                     main@days:
   444                           	opt stack 0
   445                           
   446                           ; 7 bytes @ 0x18
   447  000019                     	ds	7
   448  000020                     main@date:
   449                           	opt stack 0
   450                           
   451                           ; 10 bytes @ 0x1F
   452  000020                     	ds	10
   453  00002A                     main@month:
   454                           	opt stack 0
   455                           
   456                           ; 10 bytes @ 0x29
   457  00002A                     	ds	10
   458  000034                     main@year:
   459                           	opt stack 0
   460                           
   461                           ; 10 bytes @ 0x33
   462  000034                     	ds	10
   463  00003E                     main@secs:
   464                           	opt stack 0
   465                           
   466                           ; 10 bytes @ 0x3D
   467  00003E                     	ds	10
   468  000048                     main@mins:
   469                           	opt stack 0
   470                           
   471                           ; 10 bytes @ 0x47
   472  000048                     	ds	10
   473  000052                     main@hours:
   474                           	opt stack 0
   475                           
   476                           ; 10 bytes @ 0x51
   477  000052                     	ds	10
   478  00005C                     main@Clock_type:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x5B
   482  00005C                     	ds	1
   483  00005D                     main@AM_PM:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x5C
   487  00005D                     	ds	1
   488                           tblptru	equ	0xFF8
   489                           tblptrh	equ	0xFF7
   490                           tblptrl	equ	0xFF6
   491                           tablat	equ	0xFF5
   492                           postinc0	equ	0xFEE
   493                           wreg	equ	0xFE8
   494                           postdec1	equ	0xFE5
   495                           fsr1l	equ	0xFE1
   496                           
   497 ;;
   498 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   499 ;;
   500 ;; *************** function _main *****************
   501 ;; Defined at:
   502 ;;		line 42 in file "RTC.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;  hours          10   81[COMRAM] unsigned char [10]
   507 ;;  mins           10   71[COMRAM] unsigned char [10]
   508 ;;  secs           10   61[COMRAM] unsigned char [10]
   509 ;;  year           10   51[COMRAM] unsigned char [10]
   510 ;;  month          10   41[COMRAM] unsigned char [10]
   511 ;;  date           10   31[COMRAM] unsigned char [10]
   512 ;;  days            7   24[COMRAM] unsigned char [7]
   513 ;;  AM_PM           1   92[COMRAM] unsigned char 
   514 ;;  Clock_type      1   91[COMRAM] unsigned char 
   515 ;; Return value:  Size  Location     Type
   516 ;;                  1    wreg      void 
   517 ;; Registers used:
   518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   519 ;; Tracked objects:
   520 ;;		On entry : 0/0
   521 ;;		On exit  : 0/0
   522 ;;		Unchanged: 0/0
   523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   524 ;;      Params:         0       0       0       0       0       0       0       0       0
   525 ;;      Locals:        69       0       0       0       0       0       0       0       0
   526 ;;      Temps:          3       0       0       0       0       0       0       0       0
   527 ;;      Totals:        72       0       0       0       0       0       0       0       0
   528 ;;Total ram usage:       72 bytes
   529 ;; Hardware stack levels required when called:    4
   530 ;; This function calls:
   531 ;;		_I2C_Init
   532 ;;		_I2C_Stop
   533 ;;		_LCD_Clear
   534 ;;		_LCD_Init
   535 ;;		_LCD_String
   536 ;;		_LCD_String_xy
   537 ;;		_MSdelay
   538 ;;		_RTC_Read_Calendar
   539 ;;		_RTC_Read_Clock
   540 ;;		_sprintf
   541 ;; This function is called by:
   542 ;;		Startup code after reset
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text0
   547  000852                     __ptext0:
   548                           	opt stack 0
   549  000852                     _main:
   550                           	opt stack 27
   551                           
   552                           ;RTC.c: 45: char secs[10],mins[10],hours[10];
   553                           ;RTC.c: 46: char date[10],month[10],year[10];
   554                           ;RTC.c: 47: char Clock_type = 0x06;
   555                           
   556                           ;incstack = 0
   557  000852  0E06               	movlw	6
   558  000854  6E5C               	movwf	main@Clock_type,c
   559                           
   560                           ;RTC.c: 48: char AM_PM = 0x05;
   561  000856  0E05               	movlw	5
   562  000858  6E5D               	movwf	main@AM_PM,c
   563                           
   564                           ;RTC.c: 49: char days[7] = {'S','M','T','W','t','F','s'};
   565  00085A  EE20  F06C         	lfsr	2,main@F3898
   566  00085E  EE10  F019         	lfsr	1,main@days
   567  000862  0E06               	movlw	6
   568  000864                     u631:
   569  000864  CFDB FFE3          	movff	plusw2,plusw1
   570  000868  06E8               	decf	wreg,f,c
   571  00086A  E2FC               	bc	u631
   572                           
   573                           ;RTC.c: 50: OSCCON=0x72;
   574  00086C  0E72               	movlw	114
   575  00086E  6ED3               	movwf	4051,c	;volatile
   576                           
   577                           ;RTC.c: 52: I2C_Init();
   578  000870  EC99  F007         	call	_I2C_Init	;wreg free
   579                           
   580                           ;RTC.c: 53: LCD_Init();
   581  000874  EC6F  F007         	call	_LCD_Init	;wreg free
   582                           
   583                           ;RTC.c: 54: LCD_Clear();
   584  000878  ECC7  F007         	call	_LCD_Clear	;wreg free
   585                           
   586                           ;RTC.c: 55: MSdelay(10);
   587  00087C  0E00               	movlw	0
   588  00087E  6E02               	movwf	MSdelay@val+1,c
   589  000880  0E0A               	movlw	10
   590  000882  6E01               	movwf	MSdelay@val,c
   591  000884  EC54  F007         	call	_MSdelay	;wreg free
   592  000888                     l1470:
   593                           
   594                           ;RTC.c: 57: {
   595                           ;RTC.c: 58: RTC_Read_Clock(0);
   596  000888  0E00               	movlw	0
   597  00088A  ECF9  F006         	call	_RTC_Read_Clock
   598                           
   599                           ;RTC.c: 59: I2C_Stop();
   600  00088E  ECD1  F007         	call	_I2C_Stop	;wreg free
   601                           
   602                           ;RTC.c: 60: if(hour & (1<<Clock_type)){
   603  000892  C05C  F016         	movff	main@Clock_type,??_main
   604  000896  0E01               	movlw	1
   605  000898  6E17               	movwf	(??_main+1)& (0+255),c
   606  00089A  0E00               	movlw	0
   607  00089C  6E18               	movwf	(??_main+2)& (0+255),c
   608  00089E  2A16               	incf	??_main,f,c
   609  0008A0  D003               	goto	u644
   610  0008A2                     u645:
   611  0008A2  90D8               	bcf	status,0,c
   612  0008A4  3617               	rlcf	??_main+1,f,c
   613  0008A6  3618               	rlcf	??_main+2,f,c
   614  0008A8                     u644:
   615  0008A8  2E16               	decfsz	??_main,f,c
   616  0008AA  D7FB               	goto	u645
   617  0008AC  505E               	movf	_hour,w,c
   618  0008AE  1617               	andwf	??_main+1,f,c
   619  0008B0  505F               	movf	_hour+1,w,c
   620  0008B2  1618               	andwf	??_main+2,f,c
   621  0008B4  5017               	movf	??_main+1,w,c
   622  0008B6  1018               	iorwf	??_main+2,w,c
   623  0008B8  B4D8               	btfsc	status,2,c
   624  0008BA  D06C               	goto	l1496
   625                           
   626                           ;RTC.c: 62: if(hour & (1<<AM_PM)){
   627  0008BC  C05D  F016         	movff	main@AM_PM,??_main
   628  0008C0  0E01               	movlw	1
   629  0008C2  6E17               	movwf	(??_main+1)& (0+255),c
   630  0008C4  0E00               	movlw	0
   631  0008C6  6E18               	movwf	(??_main+2)& (0+255),c
   632  0008C8  2A16               	incf	??_main,f,c
   633  0008CA  D003               	goto	u664
   634  0008CC                     u665:
   635  0008CC  90D8               	bcf	status,0,c
   636  0008CE  3617               	rlcf	??_main+1,f,c
   637  0008D0  3618               	rlcf	??_main+2,f,c
   638  0008D2                     u664:
   639  0008D2  2E16               	decfsz	??_main,f,c
   640  0008D4  D7FB               	goto	u665
   641  0008D6  505E               	movf	_hour,w,c
   642  0008D8  1617               	andwf	??_main+1,f,c
   643  0008DA  505F               	movf	_hour+1,w,c
   644  0008DC  1618               	andwf	??_main+2,f,c
   645  0008DE  5017               	movf	??_main+1,w,c
   646  0008E0  1018               	iorwf	??_main+2,w,c
   647  0008E2  B4D8               	btfsc	status,2,c
   648  0008E4  D00A               	goto	l1480
   649                           
   650                           ;RTC.c: 63: LCD_String_xy(1,14,"PM");
   651  0008E6  0E0E               	movlw	14
   652  0008E8  6E0B               	movwf	LCD_String_xy@pos,c
   653  0008EA  0E4D               	movlw	low STR_1
   654  0008EC  6E0C               	movwf	LCD_String_xy@msg,c
   655  0008EE  0E08               	movlw	high STR_1
   656  0008F0  6E0D               	movwf	LCD_String_xy@msg+1,c
   657  0008F2  0E01               	movlw	1
   658  0008F4  EC38  F007         	call	_LCD_String_xy
   659                           
   660                           ;RTC.c: 64: }
   661  0008F8  D009               	goto	l1482
   662  0008FA                     l1480:
   663                           
   664                           ;RTC.c: 65: else{
   665                           ;RTC.c: 66: LCD_String_xy(1,14,"AM");
   666  0008FA  0E0E               	movlw	14
   667  0008FC  6E0B               	movwf	LCD_String_xy@pos,c
   668  0008FE  0E4A               	movlw	low STR_2
   669  000900  6E0C               	movwf	LCD_String_xy@msg,c
   670  000902  0E08               	movlw	high STR_2
   671  000904  6E0D               	movwf	LCD_String_xy@msg+1,c
   672  000906  0E01               	movlw	1
   673  000908  EC38  F007         	call	_LCD_String_xy
   674  00090C                     l1482:
   675                           
   676                           ;RTC.c: 67: }
   677                           ;RTC.c: 69: hour = hour & (0x1f);
   678  00090C  0E1F               	movlw	31
   679  00090E  145E               	andwf	_hour,w,c
   680  000910  6E5E               	movwf	_hour,c
   681  000912  6A5F               	clrf	_hour+1,c
   682                           
   683                           ;RTC.c: 70: sprintf(secs,"%x ",sec);
   684  000914  0E3E               	movlw	low main@secs
   685  000916  6E08               	movwf	sprintf@sp,c
   686  000918  0E00               	movlw	high main@secs
   687  00091A  6E09               	movwf	sprintf@sp+1,c
   688  00091C  0E2A               	movlw	low STR_3
   689  00091E  6E0A               	movwf	sprintf@f,c
   690  000920  0E08               	movlw	high STR_3
   691  000922  6E0B               	movwf	sprintf@f+1,c
   692  000924  C06A  F00C         	movff	_sec,?_sprintf+4
   693  000928  C06B  F00D         	movff	_sec+1,?_sprintf+5
   694  00092C  ECA2  F005         	call	_sprintf	;wreg free
   695                           
   696                           ;RTC.c: 71: sprintf(mins,"%x:",min);
   697  000930  0E48               	movlw	low main@mins
   698  000932  6E08               	movwf	sprintf@sp,c
   699  000934  0E00               	movlw	high main@mins
   700  000936  6E09               	movwf	sprintf@sp+1,c
   701  000938  0E26               	movlw	low (STR_5+4)
   702  00093A  6E0A               	movwf	sprintf@f,c
   703  00093C  0E08               	movlw	high (STR_5+4)
   704  00093E  6E0B               	movwf	sprintf@f+1,c
   705  000940  C068  F00C         	movff	_min,?_sprintf+4
   706  000944  C069  F00D         	movff	_min+1,?_sprintf+5
   707  000948  ECA2  F005         	call	_sprintf	;wreg free
   708                           
   709                           ;RTC.c: 72: sprintf(hours,"Tim:%x:",hour);
   710  00094C  0E52               	movlw	low main@hours
   711  00094E  6E08               	movwf	sprintf@sp,c
   712  000950  0E00               	movlw	high main@hours
   713  000952  6E09               	movwf	sprintf@sp+1,c
   714  000954  0E22               	movlw	low STR_5
   715  000956  6E0A               	movwf	sprintf@f,c
   716  000958  0E08               	movlw	high STR_5
   717  00095A  6E0B               	movwf	sprintf@f+1,c
   718  00095C  C05E  F00C         	movff	_hour,?_sprintf+4
   719  000960  C05F  F00D         	movff	_hour+1,?_sprintf+5
   720  000964  ECA2  F005         	call	_sprintf	;wreg free
   721                           
   722                           ;RTC.c: 73: LCD_String_xy(0,0,hours);
   723  000968  0E00               	movlw	0
   724  00096A  6E0B               	movwf	LCD_String_xy@pos,c
   725  00096C  0E52               	movlw	low main@hours
   726  00096E  6E0C               	movwf	LCD_String_xy@msg,c
   727  000970  0E00               	movlw	high main@hours
   728  000972  6E0D               	movwf	LCD_String_xy@msg+1,c
   729  000974  0E00               	movlw	0
   730  000976  EC38  F007         	call	_LCD_String_xy
   731                           
   732                           ;RTC.c: 74: LCD_String(mins);
   733  00097A  0E48               	movlw	low main@mins
   734  00097C  6E09               	movwf	LCD_String@msg,c
   735  00097E  0E00               	movlw	high main@mins
   736  000980  6E0A               	movwf	LCD_String@msg+1,c
   737  000982  EC84  F006         	call	_LCD_String	;wreg free
   738                           
   739                           ;RTC.c: 75: LCD_String(secs);
   740  000986  0E3E               	movlw	low main@secs
   741  000988  6E09               	movwf	LCD_String@msg,c
   742  00098A  0E00               	movlw	high main@secs
   743  00098C  6E0A               	movwf	LCD_String@msg+1,c
   744  00098E  EC84  F006         	call	_LCD_String	;wreg free
   745                           
   746                           ;RTC.c: 76: }
   747  000992  D043               	goto	l1510
   748  000994                     l1496:
   749                           
   750                           ;RTC.c: 77: else{
   751                           ;RTC.c: 79: hour = hour & (0x3f);
   752  000994  0E3F               	movlw	63
   753  000996  145E               	andwf	_hour,w,c
   754  000998  6E5E               	movwf	_hour,c
   755  00099A  6A5F               	clrf	_hour+1,c
   756                           
   757                           ;RTC.c: 80: sprintf(secs,"%x ",sec);
   758  00099C  0E3E               	movlw	low main@secs
   759  00099E  6E08               	movwf	sprintf@sp,c
   760  0009A0  0E00               	movlw	high main@secs
   761  0009A2  6E09               	movwf	sprintf@sp+1,c
   762  0009A4  0E2A               	movlw	low STR_3
   763  0009A6  6E0A               	movwf	sprintf@f,c
   764  0009A8  0E08               	movlw	high STR_3
   765  0009AA  6E0B               	movwf	sprintf@f+1,c
   766  0009AC  C06A  F00C         	movff	_sec,?_sprintf+4
   767  0009B0  C06B  F00D         	movff	_sec+1,?_sprintf+5
   768  0009B4  ECA2  F005         	call	_sprintf	;wreg free
   769                           
   770                           ;RTC.c: 81: sprintf(mins,"%x:",min);
   771  0009B8  0E48               	movlw	low main@mins
   772  0009BA  6E08               	movwf	sprintf@sp,c
   773  0009BC  0E00               	movlw	high main@mins
   774  0009BE  6E09               	movwf	sprintf@sp+1,c
   775  0009C0  0E26               	movlw	low (STR_5+4)
   776  0009C2  6E0A               	movwf	sprintf@f,c
   777  0009C4  0E08               	movlw	high (STR_5+4)
   778  0009C6  6E0B               	movwf	sprintf@f+1,c
   779  0009C8  C068  F00C         	movff	_min,?_sprintf+4
   780  0009CC  C069  F00D         	movff	_min+1,?_sprintf+5
   781  0009D0  ECA2  F005         	call	_sprintf	;wreg free
   782                           
   783                           ;RTC.c: 82: sprintf(hours,"Tim:%x:",hour);
   784  0009D4  0E52               	movlw	low main@hours
   785  0009D6  6E08               	movwf	sprintf@sp,c
   786  0009D8  0E00               	movlw	high main@hours
   787  0009DA  6E09               	movwf	sprintf@sp+1,c
   788  0009DC  0E22               	movlw	low STR_5
   789  0009DE  6E0A               	movwf	sprintf@f,c
   790  0009E0  0E08               	movlw	high STR_5
   791  0009E2  6E0B               	movwf	sprintf@f+1,c
   792  0009E4  C05E  F00C         	movff	_hour,?_sprintf+4
   793  0009E8  C05F  F00D         	movff	_hour+1,?_sprintf+5
   794  0009EC  ECA2  F005         	call	_sprintf	;wreg free
   795                           
   796                           ;RTC.c: 83: LCD_String_xy(0,0,hours);
   797  0009F0  0E00               	movlw	0
   798  0009F2  6E0B               	movwf	LCD_String_xy@pos,c
   799  0009F4  0E52               	movlw	low main@hours
   800  0009F6  6E0C               	movwf	LCD_String_xy@msg,c
   801  0009F8  0E00               	movlw	high main@hours
   802  0009FA  6E0D               	movwf	LCD_String_xy@msg+1,c
   803  0009FC  0E00               	movlw	0
   804  0009FE  EC38  F007         	call	_LCD_String_xy
   805                           
   806                           ;RTC.c: 84: LCD_String(mins);
   807  000A02  0E48               	movlw	low main@mins
   808  000A04  6E09               	movwf	LCD_String@msg,c
   809  000A06  0E00               	movlw	high main@mins
   810  000A08  6E0A               	movwf	LCD_String@msg+1,c
   811  000A0A  EC84  F006         	call	_LCD_String	;wreg free
   812                           
   813                           ;RTC.c: 85: LCD_String(secs);
   814  000A0E  0E3E               	movlw	low main@secs
   815  000A10  6E09               	movwf	LCD_String@msg,c
   816  000A12  0E00               	movlw	high main@secs
   817  000A14  6E0A               	movwf	LCD_String@msg+1,c
   818  000A16  EC84  F006         	call	_LCD_String	;wreg free
   819  000A1A                     l1510:
   820                           
   821                           ;RTC.c: 86: }
   822                           ;RTC.c: 88: RTC_Read_Calendar(3);
   823  000A1A  0E03               	movlw	3
   824  000A1C  EC2E  F006         	call	_RTC_Read_Calendar
   825                           
   826                           ;RTC.c: 89: I2C_Stop();
   827  000A20  ECD1  F007         	call	_I2C_Stop	;wreg free
   828                           
   829                           ;RTC.c: 90: sprintf(date,"Cal %x-",Date);
   830  000A24  0E20               	movlw	low main@date
   831  000A26  6E08               	movwf	sprintf@sp,c
   832  000A28  0E00               	movlw	high main@date
   833  000A2A  6E09               	movwf	sprintf@sp+1,c
   834  000A2C  0E1A               	movlw	low STR_9
   835  000A2E  6E0A               	movwf	sprintf@f,c
   836  000A30  0E08               	movlw	high STR_9
   837  000A32  6E0B               	movwf	sprintf@f+1,c
   838  000A34  C060  F00C         	movff	_Date,?_sprintf+4
   839  000A38  C061  F00D         	movff	_Date+1,?_sprintf+5
   840  000A3C  ECA2  F005         	call	_sprintf	;wreg free
   841                           
   842                           ;RTC.c: 91: sprintf(month,"%x-",Month);
   843  000A40  0E2A               	movlw	low main@month
   844  000A42  6E08               	movwf	sprintf@sp,c
   845  000A44  0E00               	movlw	high main@month
   846  000A46  6E09               	movwf	sprintf@sp+1,c
   847  000A48  0E1E               	movlw	low (STR_9+4)
   848  000A4A  6E0A               	movwf	sprintf@f,c
   849  000A4C  0E08               	movlw	high (STR_9+4)
   850  000A4E  6E0B               	movwf	sprintf@f+1,c
   851  000A50  C064  F00C         	movff	_Month,?_sprintf+4
   852  000A54  C065  F00D         	movff	_Month+1,?_sprintf+5
   853  000A58  ECA2  F005         	call	_sprintf	;wreg free
   854                           
   855                           ;RTC.c: 92: sprintf(year,"%x ",Year);
   856  000A5C  0E34               	movlw	low main@year
   857  000A5E  6E08               	movwf	sprintf@sp,c
   858  000A60  0E00               	movlw	high main@year
   859  000A62  6E09               	movwf	sprintf@sp+1,c
   860  000A64  0E2A               	movlw	low STR_3
   861  000A66  6E0A               	movwf	sprintf@f,c
   862  000A68  0E08               	movlw	high STR_3
   863  000A6A  6E0B               	movwf	sprintf@f+1,c
   864  000A6C  C066  F00C         	movff	_Year,?_sprintf+4
   865  000A70  C067  F00D         	movff	_Year+1,?_sprintf+5
   866  000A74  ECA2  F005         	call	_sprintf	;wreg free
   867                           
   868                           ;RTC.c: 93: LCD_String_xy(2,0,date);
   869  000A78  0E00               	movlw	0
   870  000A7A  6E0B               	movwf	LCD_String_xy@pos,c
   871  000A7C  0E20               	movlw	low main@date
   872  000A7E  6E0C               	movwf	LCD_String_xy@msg,c
   873  000A80  0E00               	movlw	high main@date
   874  000A82  6E0D               	movwf	LCD_String_xy@msg+1,c
   875  000A84  0E02               	movlw	2
   876  000A86  EC38  F007         	call	_LCD_String_xy
   877                           
   878                           ;RTC.c: 94: LCD_String(month);
   879  000A8A  0E2A               	movlw	low main@month
   880  000A8C  6E09               	movwf	LCD_String@msg,c
   881  000A8E  0E00               	movlw	high main@month
   882  000A90  6E0A               	movwf	LCD_String@msg+1,c
   883  000A92  EC84  F006         	call	_LCD_String	;wreg free
   884                           
   885                           ;RTC.c: 95: LCD_String(year);
   886  000A96  0E34               	movlw	low main@year
   887  000A98  6E09               	movwf	LCD_String@msg,c
   888  000A9A  0E00               	movlw	high main@year
   889  000A9C  6E0A               	movwf	LCD_String@msg+1,c
   890  000A9E  EC84  F006         	call	_LCD_String	;wreg free
   891                           
   892                           ;RTC.c: 98: switch(days[Day])
   893  000AA2  D031               	goto	l1542
   894  000AA4                     l1526:
   895                           
   896                           ;RTC.c: 101: LCD_String("Sun");
   897  000AA4  0E3E               	movlw	low STR_12
   898  000AA6  6E09               	movwf	LCD_String@msg,c
   899  000AA8  0E08               	movlw	high STR_12
   900  000AAA  6E0A               	movwf	LCD_String@msg+1,c
   901  000AAC  EC84  F006         	call	_LCD_String	;wreg free
   902                           
   903                           ;RTC.c: 102: break;
   904  000AB0  D6EB               	goto	l1470
   905  000AB2                     l1528:
   906                           
   907                           ;RTC.c: 104: LCD_String("Mon");
   908  000AB2  0E3A               	movlw	low STR_13
   909  000AB4  6E09               	movwf	LCD_String@msg,c
   910  000AB6  0E08               	movlw	high STR_13
   911  000AB8  6E0A               	movwf	LCD_String@msg+1,c
   912  000ABA  EC84  F006         	call	_LCD_String	;wreg free
   913                           
   914                           ;RTC.c: 105: break;
   915  000ABE  D6E4               	goto	l1470
   916  000AC0                     l1530:
   917                           
   918                           ;RTC.c: 107: LCD_String("Tue");
   919  000AC0  0E32               	movlw	low STR_14
   920  000AC2  6E09               	movwf	LCD_String@msg,c
   921  000AC4  0E08               	movlw	high STR_14
   922  000AC6  6E0A               	movwf	LCD_String@msg+1,c
   923  000AC8  EC84  F006         	call	_LCD_String	;wreg free
   924                           
   925                           ;RTC.c: 108: break;
   926  000ACC  D6DD               	goto	l1470
   927  000ACE                     l1532:
   928                           
   929                           ;RTC.c: 110: LCD_String("Wed");
   930  000ACE  0E2E               	movlw	low STR_15
   931  000AD0  6E09               	movwf	LCD_String@msg,c
   932  000AD2  0E08               	movlw	high STR_15
   933  000AD4  6E0A               	movwf	LCD_String@msg+1,c
   934  000AD6  EC84  F006         	call	_LCD_String	;wreg free
   935                           
   936                           ;RTC.c: 111: break;
   937  000ADA  D6D6               	goto	l1470
   938  000ADC                     l1534:
   939                           
   940                           ;RTC.c: 113: LCD_String("Thu");
   941  000ADC  0E46               	movlw	low STR_16
   942  000ADE  6E09               	movwf	LCD_String@msg,c
   943  000AE0  0E08               	movlw	high STR_16
   944  000AE2  6E0A               	movwf	LCD_String@msg+1,c
   945  000AE4  EC84  F006         	call	_LCD_String	;wreg free
   946                           
   947                           ;RTC.c: 114: break;
   948  000AE8  D6CF               	goto	l1470
   949  000AEA                     l1536:
   950                           
   951                           ;RTC.c: 116: LCD_String("Fri");
   952  000AEA  0E36               	movlw	low STR_17
   953  000AEC  6E09               	movwf	LCD_String@msg,c
   954  000AEE  0E08               	movlw	high STR_17
   955  000AF0  6E0A               	movwf	LCD_String@msg+1,c
   956  000AF2  EC84  F006         	call	_LCD_String	;wreg free
   957                           
   958                           ;RTC.c: 117: break;
   959  000AF6  D6C8               	goto	l1470
   960  000AF8                     l1538:
   961                           
   962                           ;RTC.c: 119: LCD_String("Sat");
   963  000AF8  0E42               	movlw	low STR_18
   964  000AFA  6E09               	movwf	LCD_String@msg,c
   965  000AFC  0E08               	movlw	high STR_18
   966  000AFE  6E0A               	movwf	LCD_String@msg+1,c
   967  000B00  EC84  F006         	call	_LCD_String	;wreg free
   968                           
   969                           ;RTC.c: 124: }
   970                           
   971                           ;RTC.c: 122: break;
   972                           
   973                           ;RTC.c: 121: default:
   974                           
   975                           ;RTC.c: 120: break;
   976  000B04  D6C1               	goto	l1470
   977  000B06                     l1542:
   978  000B06  0E19               	movlw	low main@days
   979  000B08  0100               	movlb	0	; () banked
   980  000B0A  2562               	addwf	_Day& (0+255),w,b
   981  000B0C  6ED9               	movwf	fsr2l,c
   982  000B0E  0E00               	movlw	high main@days
   983  000B10  0100               	movlb	0	; () banked
   984  000B12  2163               	addwfc	(_Day+1)& (0+255),w,b
   985  000B14  6EDA               	movwf	fsr2h,c
   986  000B16  50DF               	movf	indf2,w,c
   987                           
   988                           ; Switch size 1, requested type "space"
   989                           ; Number of cases is 7, Range of values is 70 to 116
   990                           ; switch strategies available:
   991                           ; Name         Instructions Cycles
   992                           ; simple_byte           22    12 (average)
   993                           ;	Chosen strategy is simple_byte
   994  000B18  0A46               	xorlw	70	; case 70
   995  000B1A  B4D8               	btfsc	status,2,c
   996  000B1C  D7E6               	goto	l1536
   997  000B1E  0A0B               	xorlw	11	; case 77
   998  000B20  B4D8               	btfsc	status,2,c
   999  000B22  D7C7               	goto	l1528
  1000  000B24  0A1E               	xorlw	30	; case 83
  1001  000B26  B4D8               	btfsc	status,2,c
  1002  000B28  D7BD               	goto	l1526
  1003  000B2A  0A07               	xorlw	7	; case 84
  1004  000B2C  B4D8               	btfsc	status,2,c
  1005  000B2E  D7C8               	goto	l1530
  1006  000B30  0A03               	xorlw	3	; case 87
  1007  000B32  B4D8               	btfsc	status,2,c
  1008  000B34  D7CC               	goto	l1532
  1009  000B36  0A24               	xorlw	36	; case 115
  1010  000B38  B4D8               	btfsc	status,2,c
  1011  000B3A  D7DE               	goto	l1538
  1012  000B3C  0A07               	xorlw	7	; case 116
  1013  000B3E  B4D8               	btfsc	status,2,c
  1014  000B40  D7CD               	goto	l1534
  1015                           
  1016                           ; BSR set to: 0
  1017                           
  1018                           ; BSR set to: 0
  1019  000B42  D6A2               	goto	l1470
  1020  000B44                     __end_of_main:
  1021                           	opt stack 0
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           plusw1	equ	0xFE3
  1030                           fsr1l	equ	0xFE1
  1031                           indf2	equ	0xFDF
  1032                           plusw2	equ	0xFDB
  1033                           fsr2h	equ	0xFDA
  1034                           fsr2l	equ	0xFD9
  1035                           status	equ	0xFD8
  1036                           
  1037 ;; *************** function _sprintf *****************
  1038 ;; Defined at:
  1039 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;  sp              2    7[COMRAM] PTR unsigned char 
  1042 ;;		 -> main@year(10), main@month(10), main@date(10), main@hours(10), 
  1043 ;;		 -> main@mins(10), main@secs(10), 
  1044 ;;  f               2    9[COMRAM] PTR const unsigned char 
  1045 ;;		 -> STR_11(4), STR_10(4), STR_9(8), STR_8(8), 
  1046 ;;		 -> STR_7(4), STR_6(4), STR_5(8), STR_4(4), 
  1047 ;;		 -> STR_3(4), 
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;  idx             1   16[COMRAM] unsigned char 
  1050 ;;  tmpval          4    0        struct .
  1051 ;;  cp              3    0        PTR const unsigned char 
  1052 ;;  val             2   17[COMRAM] unsigned int 
  1053 ;;  ap              2   14[COMRAM] PTR void [1]
  1054 ;;		 -> ?_sprintf(2), 
  1055 ;;  len             2    0        unsigned int 
  1056 ;;  c               1   20[COMRAM] char 
  1057 ;;  prec            1   19[COMRAM] char 
  1058 ;;  flag            1   13[COMRAM] unsigned char 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  2    7[COMRAM] int 
  1061 ;; Registers used:
  1062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1068 ;;      Params:         6       0       0       0       0       0       0       0       0
  1069 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1071 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1072 ;;Total ram usage:       14 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    1
  1075 ;; This function calls:
  1076 ;;		___lwdiv
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text1
  1083  000B44                     __ptext1:
  1084                           	opt stack 0
  1085  000B44                     _sprintf:
  1086                           	opt stack 29
  1087                           
  1088                           ;doprnt.c: 494: va_list ap;
  1089                           ;doprnt.c: 499: signed char c;
  1090                           ;doprnt.c: 506: signed char prec;
  1091                           ;doprnt.c: 508: unsigned char flag;
  1092                           ;doprnt.c: 523: union {
  1093                           ;doprnt.c: 524: unsigned long vd;
  1094                           ;doprnt.c: 525: double integ;
  1095                           ;doprnt.c: 526: } tmpval;
  1096                           ;doprnt.c: 528: unsigned int val;
  1097                           ;doprnt.c: 529: unsigned len;
  1098                           ;doprnt.c: 530: const char * cp;
  1099                           ;doprnt.c: 533: *ap = __va_start();
  1100                           
  1101                           ; BSR set to: 0
  1102                           ;incstack = 0
  1103  000B44  0E0C               	movlw	low (?_sprintf+4)
  1104  000B46  6E0F               	movwf	sprintf@ap,c
  1105  000B48  0E00               	movlw	high (?_sprintf+4)
  1106  000B4A  6E10               	movwf	sprintf@ap+1,c
  1107                           
  1108                           ;doprnt.c: 536: while(c = *f++) {
  1109  000B4C  D074               	goto	l1450
  1110  000B4E                     l1410:
  1111                           
  1112                           ;doprnt.c: 538: if(c != '%')
  1113  000B4E  0E25               	movlw	37
  1114  000B50  1815               	xorwf	sprintf@c,w,c
  1115  000B52  B4D8               	btfsc	status,2,c
  1116  000B54  D009               	goto	l1416
  1117                           
  1118                           ;doprnt.c: 540: {
  1119                           ;doprnt.c: 541: ((*sp++ = (c)));
  1120  000B56  C008  FFD9         	movff	sprintf@sp,fsr2l
  1121  000B5A  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1122  000B5E  C015  FFDF         	movff	sprintf@c,indf2
  1123  000B62  4A08               	infsnz	sprintf@sp,f,c
  1124  000B64  2A09               	incf	sprintf@sp+1,f,c
  1125                           
  1126                           ;doprnt.c: 542: continue;
  1127  000B66  D067               	goto	l1450
  1128  000B68                     l1416:
  1129                           
  1130                           ;doprnt.c: 543: }
  1131                           ;doprnt.c: 548: flag = 0;
  1132  000B68  0E00               	movlw	0
  1133  000B6A  6E0E               	movwf	sprintf@flag,c
  1134                           
  1135                           ;doprnt.c: 822: }
  1136                           
  1137                           ;doprnt.c: 813: continue;
  1138                           
  1139                           ;doprnt.c: 802: default:
  1140                           
  1141                           ;doprnt.c: 723: break;
  1142                           
  1143                           ;doprnt.c: 718: case 'x':
  1144                           
  1145                           ;doprnt.c: 638: goto alldone;
  1146                           
  1147                           ;doprnt.c: 637: case 0:
  1148                           
  1149                           ;doprnt.c: 635: switch(c = *f++) {
  1150  000B6C  C00A  FFF6         	movff	sprintf@f,tblptrl
  1151  000B70  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1152  000B74  4A0A               	infsnz	sprintf@f,f,c
  1153  000B76  2A0B               	incf	sprintf@f+1,f,c
  1154  000B78                     	if	0	;tblptru may be non-zero
  1155  000B78                     	endif
  1156  000B78                     	if	0	;tblptru may be non-zero
  1157  000B78                     	endif
  1158  000B78  0008               	tblrd		*
  1159  000B7A  CFF5 F015          	movff	tablat,sprintf@c
  1160  000B7E  5015               	movf	sprintf@c,w,c
  1161                           
  1162                           ; Switch size 1, requested type "space"
  1163                           ; Number of cases is 2, Range of values is 0 to 120
  1164                           ; switch strategies available:
  1165                           ; Name         Instructions Cycles
  1166                           ; simple_byte            7     4 (average)
  1167                           ;	Chosen strategy is simple_byte
  1168  000B80  0A00               	xorlw	0	; case 0
  1169  000B82  B4D8               	btfsc	status,2,c
  1170  000B84  D064               	goto	l1452
  1171  000B86  0A78               	xorlw	120	; case 120
  1172  000B88  A4D8               	btfss	status,2,c
  1173  000B8A  D055               	goto	l1450
  1174                           
  1175                           ;doprnt.c: 1273: {
  1176                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1177  000B8C  C00F  FFD9         	movff	sprintf@ap,fsr2l
  1178  000B90  C010  FFDA         	movff	sprintf@ap+1,fsr2h
  1179  000B94  CFDE F012          	movff	postinc2,sprintf@val
  1180  000B98  CFDD F013          	movff	postdec2,sprintf@val+1
  1181  000B9C  0E02               	movlw	2
  1182  000B9E  260F               	addwf	sprintf@ap,f,c
  1183  000BA0  0E00               	movlw	0
  1184  000BA2  2210               	addwfc	sprintf@ap+1,f,c
  1185                           
  1186                           ;doprnt.c: 1287: }
  1187                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1188  000BA4  0E01               	movlw	1
  1189  000BA6  6E15               	movwf	sprintf@c,c
  1190  000BA8                     l1428:
  1191  000BA8  0E04               	movlw	4
  1192  000BAA  1815               	xorwf	sprintf@c,w,c
  1193  000BAC  B4D8               	btfsc	status,2,c
  1194  000BAE  D012               	goto	l244
  1195                           
  1196                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1197  000BB0  5015               	movf	sprintf@c,w,c
  1198  000BB2  0D02               	mullw	2
  1199  000BB4  0E01               	movlw	low _hexpowers
  1200  000BB6  24F3               	addwf	prodl,w,c
  1201  000BB8  6EF6               	movwf	tblptrl,c
  1202  000BBA  0E08               	movlw	high _hexpowers
  1203  000BBC  20F4               	addwfc	prodh,w,c
  1204  000BBE  6EF7               	movwf	tblptrh,c
  1205  000BC0                     	if	0	;There are less than 3 active tblptr bytes
  1206  000BC0                     	endif
  1207  000BC0  0009               	tblrd		*+
  1208  000BC2  50F5               	movf	tablat,w,c
  1209  000BC4  5C12               	subwf	sprintf@val,w,c
  1210  000BC6  0009               	tblrd		*+
  1211  000BC8  50F5               	movf	tablat,w,c
  1212  000BCA  5813               	subwfb	sprintf@val+1,w,c
  1213  000BCC  A0D8               	btfss	status,0,c
  1214  000BCE  D002               	goto	l244
  1215                           
  1216                           ;doprnt.c: 1318: break;
  1217  000BD0  2A15               	incf	sprintf@c,f,c
  1218  000BD2  D7EA               	goto	l1428
  1219  000BD4                     l244:
  1220                           
  1221                           ;doprnt.c: 1422: {
  1222                           ;doprnt.c: 1469: }
  1223                           ;doprnt.c: 1472: prec = c;
  1224  000BD4  C015  F014         	movff	sprintf@c,sprintf@prec
  1225                           
  1226                           ;doprnt.c: 1474: while(prec--) {
  1227  000BD8  D02A               	goto	l1448
  1228  000BDA                     l1440:
  1229                           
  1230                           ;doprnt.c: 1478: {
  1231                           ;doprnt.c: 1499: {
  1232                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1233  000BDA  C012  F001         	movff	sprintf@val,___lwdiv@dividend
  1234  000BDE  C013  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1235  000BE2  5014               	movf	sprintf@prec,w,c
  1236  000BE4  0D02               	mullw	2
  1237  000BE6  0E01               	movlw	low _hexpowers
  1238  000BE8  24F3               	addwf	prodl,w,c
  1239  000BEA  6EF6               	movwf	tblptrl,c
  1240  000BEC  0E08               	movlw	high _hexpowers
  1241  000BEE  20F4               	addwfc	prodh,w,c
  1242  000BF0  6EF7               	movwf	tblptrh,c
  1243  000BF2                     	if	0	;There are less than 3 active tblptr bytes
  1244  000BF2                     	endif
  1245  000BF2  0009               	tblrd		*+
  1246  000BF4  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1247  000BF8  000A               	tblrd		*-
  1248  000BFA  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1249  000BFE  EC5B  F006         	call	___lwdiv	;wreg free
  1250  000C02  5001               	movf	?___lwdiv,w,c
  1251  000C04  0B0F               	andlw	15
  1252  000C06  6E11               	movwf	sprintf@idx,c
  1253                           
  1254                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1255  000C08  5011               	movf	sprintf@idx,w,c
  1256  000C0A  0D01               	mullw	1
  1257  000C0C  0E09               	movlw	low STR_19
  1258  000C0E  24F3               	addwf	prodl,w,c
  1259  000C10  6EF6               	movwf	tblptrl,c
  1260  000C12  0E08               	movlw	high STR_19
  1261  000C14  20F4               	addwfc	prodh,w,c
  1262  000C16  6EF7               	movwf	tblptrh,c
  1263  000C18                     	if	0	;There are less than 3 active tblptr bytes
  1264  000C18                     	endif
  1265  000C18  0008               	tblrd		*
  1266  000C1A  CFF5 F015          	movff	tablat,sprintf@c
  1267                           
  1268                           ;doprnt.c: 1508: }
  1269                           ;doprnt.c: 1523: }
  1270                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1271  000C1E  C008  FFD9         	movff	sprintf@sp,fsr2l
  1272  000C22  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1273  000C26  C015  FFDF         	movff	sprintf@c,indf2
  1274  000C2A  4A08               	infsnz	sprintf@sp,f,c
  1275  000C2C  2A09               	incf	sprintf@sp+1,f,c
  1276  000C2E                     l1448:
  1277  000C2E  0614               	decf	sprintf@prec,f,c
  1278  000C30  2814               	incf	sprintf@prec,w,c
  1279  000C32  A4D8               	btfss	status,2,c
  1280  000C34  D7D2               	goto	l1440
  1281  000C36                     l1450:
  1282  000C36  C00A  FFF6         	movff	sprintf@f,tblptrl
  1283  000C3A  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1284  000C3E  4A0A               	infsnz	sprintf@f,f,c
  1285  000C40  2A0B               	incf	sprintf@f+1,f,c
  1286  000C42                     	if	0	;tblptru may be non-zero
  1287  000C42                     	endif
  1288  000C42                     	if	0	;tblptru may be non-zero
  1289  000C42                     	endif
  1290  000C42  0008               	tblrd		*
  1291  000C44  CFF5 F015          	movff	tablat,sprintf@c
  1292  000C48  5015               	movf	sprintf@c,w,c
  1293  000C4A  A4D8               	btfss	status,2,c
  1294  000C4C  D780               	goto	l1410
  1295  000C4E                     l1452:
  1296                           
  1297                           ;doprnt.c: 1538: *sp = 0;
  1298  000C4E  C008  FFD9         	movff	sprintf@sp,fsr2l
  1299  000C52  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1300  000C56  0E00               	movlw	0
  1301  000C58  6EDF               	movwf	indf2,c
  1302  000C5A  0012               	return	
  1303  000C5C                     __end_of_sprintf:
  1304                           	opt stack 0
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           prodh	equ	0xFF4
  1310                           prodl	equ	0xFF3
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           postdec1	equ	0xFE5
  1314                           plusw1	equ	0xFE3
  1315                           fsr1l	equ	0xFE1
  1316                           indf2	equ	0xFDF
  1317                           postinc2	equ	0xFDE
  1318                           postdec2	equ	0xFDD
  1319                           plusw2	equ	0xFDB
  1320                           fsr2h	equ	0xFDA
  1321                           fsr2l	equ	0xFD9
  1322                           status	equ	0xFD8
  1323                           
  1324 ;; *************** function ___lwdiv *****************
  1325 ;; Defined at:
  1326 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  1327 ;; Parameters:    Size  Location     Type
  1328 ;;  dividend        2    0[COMRAM] unsigned int 
  1329 ;;  divisor         2    2[COMRAM] unsigned int 
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;  quotient        2    4[COMRAM] unsigned int 
  1332 ;;  counter         1    6[COMRAM] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  2    0[COMRAM] unsigned int 
  1335 ;; Registers used:
  1336 ;;		wreg, status,2, status,0
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1342 ;;      Params:         4       0       0       0       0       0       0       0       0
  1343 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1345 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1346 ;;Total ram usage:        7 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; This function calls:
  1349 ;;		Nothing
  1350 ;; This function is called by:
  1351 ;;		_sprintf
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text2
  1356  000CB6                     __ptext2:
  1357                           	opt stack 0
  1358  000CB6                     ___lwdiv:
  1359                           	opt stack 29
  1360                           
  1361                           ;incstack = 0
  1362  000CB6  0E00               	movlw	0
  1363  000CB8  6E06               	movwf	___lwdiv@quotient+1,c
  1364  000CBA  0E00               	movlw	0
  1365  000CBC  6E05               	movwf	___lwdiv@quotient,c
  1366  000CBE  5003               	movf	___lwdiv@divisor,w,c
  1367  000CC0  1004               	iorwf	___lwdiv@divisor+1,w,c
  1368  000CC2  B4D8               	btfsc	status,2,c
  1369  000CC4  D01C               	goto	l653
  1370  000CC6  0E01               	movlw	1
  1371  000CC8  6E07               	movwf	___lwdiv@counter,c
  1372  000CCA  D004               	goto	l1336
  1373  000CCC                     l1334:
  1374  000CCC  90D8               	bcf	status,0,c
  1375  000CCE  3603               	rlcf	___lwdiv@divisor,f,c
  1376  000CD0  3604               	rlcf	___lwdiv@divisor+1,f,c
  1377  000CD2  2A07               	incf	___lwdiv@counter,f,c
  1378  000CD4                     l1336:
  1379  000CD4  AE04               	btfss	___lwdiv@divisor+1,7,c
  1380  000CD6  D7FA               	goto	l1334
  1381  000CD8                     l1338:
  1382  000CD8  90D8               	bcf	status,0,c
  1383  000CDA  3605               	rlcf	___lwdiv@quotient,f,c
  1384  000CDC  3606               	rlcf	___lwdiv@quotient+1,f,c
  1385  000CDE  5003               	movf	___lwdiv@divisor,w,c
  1386  000CE0  5C01               	subwf	___lwdiv@dividend,w,c
  1387  000CE2  5004               	movf	___lwdiv@divisor+1,w,c
  1388  000CE4  5802               	subwfb	___lwdiv@dividend+1,w,c
  1389  000CE6  A0D8               	btfss	status,0,c
  1390  000CE8  D005               	goto	l1346
  1391  000CEA  5003               	movf	___lwdiv@divisor,w,c
  1392  000CEC  5E01               	subwf	___lwdiv@dividend,f,c
  1393  000CEE  5004               	movf	___lwdiv@divisor+1,w,c
  1394  000CF0  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1395  000CF2  8005               	bsf	___lwdiv@quotient,0,c
  1396  000CF4                     l1346:
  1397  000CF4  90D8               	bcf	status,0,c
  1398  000CF6  3204               	rrcf	___lwdiv@divisor+1,f,c
  1399  000CF8  3203               	rrcf	___lwdiv@divisor,f,c
  1400  000CFA  2E07               	decfsz	___lwdiv@counter,f,c
  1401  000CFC  D7ED               	goto	l1338
  1402  000CFE                     l653:
  1403  000CFE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1404  000D02  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1405  000D06  0012               	return		;funcret
  1406  000D08                     __end_of___lwdiv:
  1407                           	opt stack 0
  1408                           tblptru	equ	0xFF8
  1409                           tblptrh	equ	0xFF7
  1410                           tblptrl	equ	0xFF6
  1411                           tablat	equ	0xFF5
  1412                           prodh	equ	0xFF4
  1413                           prodl	equ	0xFF3
  1414                           postinc0	equ	0xFEE
  1415                           wreg	equ	0xFE8
  1416                           postdec1	equ	0xFE5
  1417                           plusw1	equ	0xFE3
  1418                           fsr1l	equ	0xFE1
  1419                           indf2	equ	0xFDF
  1420                           postinc2	equ	0xFDE
  1421                           postdec2	equ	0xFDD
  1422                           plusw2	equ	0xFDB
  1423                           fsr2h	equ	0xFDA
  1424                           fsr2l	equ	0xFD9
  1425                           status	equ	0xFD8
  1426                           
  1427 ;; *************** function _RTC_Read_Clock *****************
  1428 ;; Defined at:
  1429 ;;		line 19 in file "RTC.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;  read_clock_a    1    wreg     unsigned char 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  read_clock_a    1    3[COMRAM] unsigned char 
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, status,2, status,0, cstack
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1443 ;;      Params:         0       0       0       0       0       0       0       0       0
  1444 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1445 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1446 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1447 ;;Total ram usage:        2 bytes
  1448 ;; Hardware stack levels used:    1
  1449 ;; Hardware stack levels required when called:    3
  1450 ;; This function calls:
  1451 ;;		_I2C_Read
  1452 ;;		_I2C_Repeated_Start
  1453 ;;		_I2C_Start
  1454 ;;		_I2C_Write
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           	psect	text3
  1461  000DF2                     __ptext3:
  1462                           	opt stack 0
  1463  000DF2                     _RTC_Read_Clock:
  1464                           	opt stack 27
  1465                           
  1466                           ;incstack = 0
  1467                           ;RTC_Read_Clock@read_clock_address stored from wreg
  1468  000DF2  6E04               	movwf	RTC_Read_Clock@read_clock_address,c
  1469                           
  1470                           ;RTC.c: 21: I2C_Start(0xD0);
  1471  000DF4  0ED0               	movlw	208
  1472  000DF6  ECA6  F007         	call	_I2C_Start
  1473                           
  1474                           ;RTC.c: 22: I2C_Write(read_clock_address);
  1475  000DFA  5004               	movf	RTC_Read_Clock@read_clock_address,w,c
  1476  000DFC  ECBC  F007         	call	_I2C_Write
  1477                           
  1478                           ;RTC.c: 23: I2C_Repeated_Start(0xD1);
  1479  000E00  0ED1               	movlw	209
  1480  000E02  ECB1  F007         	call	_I2C_Repeated_Start
  1481                           
  1482                           ;RTC.c: 24: sec = I2C_Read(0);
  1483  000E06  0E00               	movlw	0
  1484  000E08  EC87  F007         	call	_I2C_Read
  1485  000E0C  6E03               	movwf	??_RTC_Read_Clock& (0+255),c
  1486  000E0E  5003               	movf	??_RTC_Read_Clock,w,c
  1487  000E10  0100               	movlb	0	; () banked
  1488  000E12  6F6A               	movwf	_sec& (0+255),b
  1489  000E14  6B6B               	clrf	(_sec+1)& (0+255),b
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;RTC.c: 25: min = I2C_Read(0);
  1493  000E16  0E00               	movlw	0
  1494  000E18  EC87  F007         	call	_I2C_Read
  1495  000E1C  6E03               	movwf	??_RTC_Read_Clock& (0+255),c
  1496  000E1E  5003               	movf	??_RTC_Read_Clock,w,c
  1497  000E20  0100               	movlb	0	; () banked
  1498  000E22  6F68               	movwf	_min& (0+255),b
  1499  000E24  6B69               	clrf	(_min+1)& (0+255),b
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;RTC.c: 26: hour= I2C_Read(1);
  1503  000E26  0E01               	movlw	1
  1504  000E28  EC87  F007         	call	_I2C_Read
  1505  000E2C  6E03               	movwf	??_RTC_Read_Clock& (0+255),c
  1506  000E2E  5003               	movf	??_RTC_Read_Clock,w,c
  1507  000E30  6E5E               	movwf	_hour,c
  1508  000E32  6A5F               	clrf	_hour+1,c
  1509  000E34  0012               	return		;funcret
  1510  000E36                     __end_of_RTC_Read_Clock:
  1511                           	opt stack 0
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           prodh	equ	0xFF4
  1517                           prodl	equ	0xFF3
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           postdec1	equ	0xFE5
  1521                           plusw1	equ	0xFE3
  1522                           fsr1l	equ	0xFE1
  1523                           indf2	equ	0xFDF
  1524                           postinc2	equ	0xFDE
  1525                           postdec2	equ	0xFDD
  1526                           plusw2	equ	0xFDB
  1527                           fsr2h	equ	0xFDA
  1528                           fsr2l	equ	0xFD9
  1529                           status	equ	0xFD8
  1530                           
  1531 ;; *************** function _RTC_Read_Calendar *****************
  1532 ;; Defined at:
  1533 ;;		line 30 in file "RTC.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  read_calenda    1    wreg     unsigned char 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  read_calenda    1    3[COMRAM] unsigned char 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1547 ;;      Params:         0       0       0       0       0       0       0       0       0
  1548 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1549 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1550 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1551 ;;Total ram usage:        2 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    3
  1554 ;; This function calls:
  1555 ;;		_I2C_Read
  1556 ;;		_I2C_Repeated_Start
  1557 ;;		_I2C_Start
  1558 ;;		_I2C_Stop
  1559 ;;		_I2C_Write
  1560 ;; This function is called by:
  1561 ;;		_main
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           	psect	text4
  1566  000C5C                     __ptext4:
  1567                           	opt stack 0
  1568  000C5C                     _RTC_Read_Calendar:
  1569                           	opt stack 27
  1570                           
  1571                           ;incstack = 0
  1572                           ;RTC_Read_Calendar@read_calendar_address stored from wreg
  1573  000C5C  6E04               	movwf	RTC_Read_Calendar@read_calendar_address,c
  1574                           
  1575                           ;RTC.c: 32: I2C_Start(0xD0);
  1576  000C5E  0ED0               	movlw	208
  1577  000C60  ECA6  F007         	call	_I2C_Start
  1578                           
  1579                           ;RTC.c: 33: I2C_Write(read_calendar_address);
  1580  000C64  5004               	movf	RTC_Read_Calendar@read_calendar_address,w,c
  1581  000C66  ECBC  F007         	call	_I2C_Write
  1582                           
  1583                           ;RTC.c: 34: I2C_Repeated_Start(0xD1);
  1584  000C6A  0ED1               	movlw	209
  1585  000C6C  ECB1  F007         	call	_I2C_Repeated_Start
  1586                           
  1587                           ;RTC.c: 35: Day = I2C_Read(0);
  1588  000C70  0E00               	movlw	0
  1589  000C72  EC87  F007         	call	_I2C_Read
  1590  000C76  6E03               	movwf	??_RTC_Read_Calendar& (0+255),c
  1591  000C78  5003               	movf	??_RTC_Read_Calendar,w,c
  1592  000C7A  0100               	movlb	0	; () banked
  1593  000C7C  6F62               	movwf	_Day& (0+255),b
  1594  000C7E  6B63               	clrf	(_Day+1)& (0+255),b
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;RTC.c: 36: Date = I2C_Read(0);
  1598  000C80  0E00               	movlw	0
  1599  000C82  EC87  F007         	call	_I2C_Read
  1600  000C86  6E03               	movwf	??_RTC_Read_Calendar& (0+255),c
  1601  000C88  5003               	movf	??_RTC_Read_Calendar,w,c
  1602  000C8A  0100               	movlb	0	; () banked
  1603  000C8C  6F60               	movwf	_Date& (0+255),b
  1604  000C8E  6B61               	clrf	(_Date+1)& (0+255),b
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;RTC.c: 37: Month = I2C_Read(0);
  1608  000C90  0E00               	movlw	0
  1609  000C92  EC87  F007         	call	_I2C_Read
  1610  000C96  6E03               	movwf	??_RTC_Read_Calendar& (0+255),c
  1611  000C98  5003               	movf	??_RTC_Read_Calendar,w,c
  1612  000C9A  0100               	movlb	0	; () banked
  1613  000C9C  6F64               	movwf	_Month& (0+255),b
  1614  000C9E  6B65               	clrf	(_Month+1)& (0+255),b
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;RTC.c: 38: Year = I2C_Read(1);
  1618  000CA0  0E01               	movlw	1
  1619  000CA2  EC87  F007         	call	_I2C_Read
  1620  000CA6  6E03               	movwf	??_RTC_Read_Calendar& (0+255),c
  1621  000CA8  5003               	movf	??_RTC_Read_Calendar,w,c
  1622  000CAA  0100               	movlb	0	; () banked
  1623  000CAC  6F66               	movwf	_Year& (0+255),b
  1624  000CAE  6B67               	clrf	(_Year+1)& (0+255),b
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;RTC.c: 39: I2C_Stop();
  1628  000CB0  ECD1  F007         	call	_I2C_Stop	;wreg free
  1629  000CB4  0012               	return		;funcret
  1630  000CB6                     __end_of_RTC_Read_Calendar:
  1631                           	opt stack 0
  1632                           tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           tblptrl	equ	0xFF6
  1635                           tablat	equ	0xFF5
  1636                           prodh	equ	0xFF4
  1637                           prodl	equ	0xFF3
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postdec1	equ	0xFE5
  1641                           plusw1	equ	0xFE3
  1642                           fsr1l	equ	0xFE1
  1643                           indf2	equ	0xFDF
  1644                           postinc2	equ	0xFDE
  1645                           postdec2	equ	0xFDD
  1646                           plusw2	equ	0xFDB
  1647                           fsr2h	equ	0xFDA
  1648                           fsr2l	equ	0xFD9
  1649                           status	equ	0xFD8
  1650                           
  1651 ;; *************** function _I2C_Stop *****************
  1652 ;; Defined at:
  1653 ;;		line 93 in file "PIC18F4550_I2C_Source_File.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;		None
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;		None
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      unsigned char 
  1660 ;; Registers used:
  1661 ;;		wreg
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1667 ;;      Params:         0       0       0       0       0       0       0       0       0
  1668 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1669 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1670 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1671 ;;Total ram usage:        0 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_RTC_Read_Calendar
  1677 ;;		_main
  1678 ;;		_I2C_Start_Wait
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text5
  1683  000FA2                     __ptext5:
  1684                           	opt stack 0
  1685  000FA2                     _I2C_Stop:
  1686                           	opt stack 29
  1687                           
  1688                           ;PIC18F4550_I2C_Source_File.c: 95: PEN = 1;
  1689                           
  1690                           ;incstack = 0
  1691  000FA2  84C5               	bsf	4037,2,c	;volatile
  1692  000FA4                     l204:
  1693  000FA4  B4C5               	btfsc	4037,2,c	;volatile
  1694  000FA6  D7FE               	goto	l204
  1695                           
  1696                           ;PIC18F4550_I2C_Source_File.c: 97: if(!SSPSTATbits.P);
  1697  000FA8  50C7               	movf	4039,w,c	;volatile
  1698  000FAA  0012               	return	
  1699  000FAC                     __end_of_I2C_Stop:
  1700                           	opt stack 0
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           prodh	equ	0xFF4
  1706                           prodl	equ	0xFF3
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           plusw1	equ	0xFE3
  1711                           fsr1l	equ	0xFE1
  1712                           indf2	equ	0xFDF
  1713                           postinc2	equ	0xFDE
  1714                           postdec2	equ	0xFDD
  1715                           plusw2	equ	0xFDB
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function _I2C_Start *****************
  1721 ;; Defined at:
  1722 ;;		line 68 in file "PIC18F4550_I2C_Source_File.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  slave_write_    1    wreg     unsigned char 
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;  slave_write_    1    1[COMRAM] unsigned char 
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  1    wreg      unsigned char 
  1729 ;; Registers used:
  1730 ;;		wreg, status,2, cstack
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1736 ;;      Params:         0       0       0       0       0       0       0       0       0
  1737 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1738 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1739 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1740 ;;Total ram usage:        1 bytes
  1741 ;; Hardware stack levels used:    1
  1742 ;; Hardware stack levels required when called:    2
  1743 ;; This function calls:
  1744 ;;		_I2C_Write
  1745 ;; This function is called by:
  1746 ;;		_RTC_Read_Clock
  1747 ;;		_RTC_Read_Calendar
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           	psect	text6
  1752  000F4C                     __ptext6:
  1753                           	opt stack 0
  1754  000F4C                     _I2C_Start:
  1755                           	opt stack 27
  1756                           
  1757                           ;incstack = 0
  1758                           ;I2C_Start@slave_write_address stored from wreg
  1759  000F4C  6E02               	movwf	I2C_Start@slave_write_address,c
  1760                           
  1761                           ;PIC18F4550_I2C_Source_File.c: 70: SSPCON2bits.SEN=1;
  1762  000F4E  80C5               	bsf	4037,0,c	;volatile
  1763  000F50                     l188:
  1764  000F50  B0C5               	btfsc	4037,0,c	;volatile
  1765  000F52  D7FE               	goto	l188
  1766                           
  1767                           ;PIC18F4550_I2C_Source_File.c: 72: SSPIF=0;
  1768  000F54  969E               	bcf	3998,3,c	;volatile
  1769                           
  1770                           ;PIC18F4550_I2C_Source_File.c: 73: if(!SSPSTATbits.S)
  1771  000F56  A6C7               	btfss	4039,3,c	;volatile
  1772  000F58  0012               	return	
  1773                           
  1774                           ;PIC18F4550_I2C_Source_File.c: 75: return (I2C_Write(slave_write_address));
  1775                           ;	Return value of _I2C_Start is never used
  1776                           
  1777                           ;PIC18F4550_I2C_Source_File.c: 74: return 0;
  1778                           ;	Return value of _I2C_Start is never used
  1779  000F5A  5002               	movf	I2C_Start@slave_write_address,w,c
  1780  000F5C  ECBC  F007         	call	_I2C_Write
  1781  000F60  0012               	return	
  1782  000F62                     __end_of_I2C_Start:
  1783                           	opt stack 0
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           prodh	equ	0xFF4
  1789                           prodl	equ	0xFF3
  1790                           postinc0	equ	0xFEE
  1791                           wreg	equ	0xFE8
  1792                           postdec1	equ	0xFE5
  1793                           plusw1	equ	0xFE3
  1794                           fsr1l	equ	0xFE1
  1795                           indf2	equ	0xFDF
  1796                           postinc2	equ	0xFDE
  1797                           postdec2	equ	0xFDD
  1798                           plusw2	equ	0xFDB
  1799                           fsr2h	equ	0xFDA
  1800                           fsr2l	equ	0xFD9
  1801                           status	equ	0xFD8
  1802                           
  1803 ;; *************** function _I2C_Repeated_Start *****************
  1804 ;; Defined at:
  1805 ;;		line 79 in file "PIC18F4550_I2C_Source_File.c"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  slave_read_a    1    wreg     unsigned char 
  1808 ;; Auto vars:     Size  Location     Type
  1809 ;;  slave_read_a    1    1[COMRAM] unsigned char 
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  1    wreg      unsigned char 
  1812 ;; Registers used:
  1813 ;;		wreg, status,2, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1819 ;;      Params:         0       0       0       0       0       0       0       0       0
  1820 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1822 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1823 ;;Total ram usage:        1 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:    2
  1826 ;; This function calls:
  1827 ;;		_I2C_Write
  1828 ;; This function is called by:
  1829 ;;		_RTC_Read_Clock
  1830 ;;		_RTC_Read_Calendar
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           	psect	text7
  1835  000F62                     __ptext7:
  1836                           	opt stack 0
  1837  000F62                     _I2C_Repeated_Start:
  1838                           	opt stack 27
  1839                           
  1840                           ;incstack = 0
  1841                           ;I2C_Repeated_Start@slave_read_address stored from wreg
  1842  000F62  6E02               	movwf	I2C_Repeated_Start@slave_read_address,c
  1843                           
  1844                           ;PIC18F4550_I2C_Source_File.c: 81: RSEN = 1;
  1845  000F64  82C5               	bsf	4037,1,c	;volatile
  1846  000F66                     l195:
  1847  000F66  B2C5               	btfsc	4037,1,c	;volatile
  1848  000F68  D7FE               	goto	l195
  1849                           
  1850                           ;PIC18F4550_I2C_Source_File.c: 83: SSPIF = 0;
  1851  000F6A  969E               	bcf	3998,3,c	;volatile
  1852                           
  1853                           ;PIC18F4550_I2C_Source_File.c: 84: if(!SSPSTATbits.S)
  1854  000F6C  A6C7               	btfss	4039,3,c	;volatile
  1855  000F6E  0012               	return	
  1856                           
  1857                           ;PIC18F4550_I2C_Source_File.c: 86: I2C_Write(slave_read_address);
  1858                           
  1859                           ;PIC18F4550_I2C_Source_File.c: 85: return 0;
  1860                           ;	Return value of _I2C_Repeated_Start is never used
  1861  000F70  5002               	movf	I2C_Repeated_Start@slave_read_address,w,c
  1862  000F72  ECBC  F007         	call	_I2C_Write
  1863                           
  1864                           ;PIC18F4550_I2C_Source_File.c: 89: else
  1865                           ;PIC18F4550_I2C_Source_File.c: 90: return 2;
  1866                           ;	Return value of _I2C_Repeated_Start is never used
  1867                           
  1868                           ;PIC18F4550_I2C_Source_File.c: 88: return 1;
  1869                           ;	Return value of _I2C_Repeated_Start is never used
  1870                           
  1871                           ;PIC18F4550_I2C_Source_File.c: 87: if (ACKSTAT)
  1872  000F76  0012               	return	
  1873  000F78                     __end_of_I2C_Repeated_Start:
  1874                           	opt stack 0
  1875                           tblptru	equ	0xFF8
  1876                           tblptrh	equ	0xFF7
  1877                           tblptrl	equ	0xFF6
  1878                           tablat	equ	0xFF5
  1879                           prodh	equ	0xFF4
  1880                           prodl	equ	0xFF3
  1881                           postinc0	equ	0xFEE
  1882                           wreg	equ	0xFE8
  1883                           postdec1	equ	0xFE5
  1884                           plusw1	equ	0xFE3
  1885                           fsr1l	equ	0xFE1
  1886                           indf2	equ	0xFDF
  1887                           postinc2	equ	0xFDE
  1888                           postdec2	equ	0xFDD
  1889                           plusw2	equ	0xFDB
  1890                           fsr2h	equ	0xFDA
  1891                           fsr2l	equ	0xFD9
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _I2C_Write *****************
  1895 ;; Defined at:
  1896 ;;		line 101 in file "PIC18F4550_I2C_Source_File.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  data            1    wreg     unsigned char 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  data            1    0[COMRAM] unsigned char 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      unsigned char 
  1903 ;; Registers used:
  1904 ;;		wreg, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1910 ;;      Params:         0       0       0       0       0       0       0       0       0
  1911 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1913 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1914 ;;Total ram usage:        1 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    1
  1917 ;; This function calls:
  1918 ;;		_I2C_Ready
  1919 ;; This function is called by:
  1920 ;;		_RTC_Read_Clock
  1921 ;;		_RTC_Read_Calendar
  1922 ;;		_I2C_Start
  1923 ;;		_I2C_Repeated_Start
  1924 ;;		_I2C_Start_Wait
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text8
  1929  000F78                     __ptext8:
  1930                           	opt stack 0
  1931  000F78                     _I2C_Write:
  1932                           	opt stack 28
  1933                           
  1934                           ;incstack = 0
  1935                           ;I2C_Write@data stored from wreg
  1936  000F78  6E01               	movwf	I2C_Write@data,c
  1937                           
  1938                           ;PIC18F4550_I2C_Source_File.c: 103: SSPBUF = data;
  1939  000F7A  C001  FFC9         	movff	I2C_Write@data,4041	;volatile
  1940                           
  1941                           ;PIC18F4550_I2C_Source_File.c: 104: I2C_Ready();
  1942  000F7E  ECE0  F007         	call	_I2C_Ready	;wreg free
  1943                           
  1944                           ;PIC18F4550_I2C_Source_File.c: 105: if (ACKSTAT)
  1945  000F82  ACC5               	btfss	4037,6,c	;volatile
  1946  000F84  D002               	goto	l1238
  1947                           
  1948                           ;PIC18F4550_I2C_Source_File.c: 106: return 1;
  1949  000F86  0E01               	movlw	1
  1950  000F88  0012               	return	
  1951  000F8A                     l1238:
  1952                           
  1953                           ;PIC18F4550_I2C_Source_File.c: 107: else
  1954                           ;PIC18F4550_I2C_Source_File.c: 108: return 2;
  1955  000F8A  0E02               	movlw	2
  1956  000F8C  0012               	return	
  1957  000F8E                     __end_of_I2C_Write:
  1958                           	opt stack 0
  1959                           tblptru	equ	0xFF8
  1960                           tblptrh	equ	0xFF7
  1961                           tblptrl	equ	0xFF6
  1962                           tablat	equ	0xFF5
  1963                           prodh	equ	0xFF4
  1964                           prodl	equ	0xFF3
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           postdec1	equ	0xFE5
  1968                           plusw1	equ	0xFE3
  1969                           fsr1l	equ	0xFE1
  1970                           indf2	equ	0xFDF
  1971                           postinc2	equ	0xFDE
  1972                           postdec2	equ	0xFDD
  1973                           plusw2	equ	0xFDB
  1974                           fsr2h	equ	0xFDA
  1975                           fsr2l	equ	0xFD9
  1976                           status	equ	0xFD8
  1977                           
  1978 ;; *************** function _I2C_Read *****************
  1979 ;; Defined at:
  1980 ;;		line 12 in file "PIC18F4550_I2C_Source_File.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;  flag            1    wreg     unsigned char 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  flag            1    0[COMRAM] unsigned char 
  1985 ;;  buffer          1    1[COMRAM] unsigned char 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      unsigned char 
  1988 ;; Registers used:
  1989 ;;		wreg, status,2, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1995 ;;      Params:         0       0       0       0       0       0       0       0       0
  1996 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1997 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1998 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1999 ;;Total ram usage:        2 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    1
  2002 ;; This function calls:
  2003 ;;		_I2C_Ack
  2004 ;;		_I2C_Nack
  2005 ;;		_I2C_Ready
  2006 ;; This function is called by:
  2007 ;;		_RTC_Read_Clock
  2008 ;;		_RTC_Read_Calendar
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012                           	psect	text9
  2013  000F0E                     __ptext9:
  2014                           	opt stack 0
  2015  000F0E                     _I2C_Read:
  2016                           	opt stack 28
  2017                           
  2018                           ;incstack = 0
  2019                           ;I2C_Read@flag stored from wreg
  2020  000F0E  6E01               	movwf	I2C_Read@flag,c
  2021                           
  2022                           ;PIC18F4550_I2C_Source_File.c: 15: char buffer;
  2023                           ;PIC18F4550_I2C_Source_File.c: 16: RCEN = 1;
  2024  000F10  86C5               	bsf	4037,3,c	;volatile
  2025  000F12                     l160:
  2026  000F12  A0C7               	btfss	4039,0,c	;volatile
  2027  000F14  D7FE               	goto	l160
  2028                           
  2029                           ;PIC18F4550_I2C_Source_File.c: 19: buffer = SSPBUF;
  2030  000F16  CFC9 F002          	movff	4041,I2C_Read@buffer	;volatile
  2031                           
  2032                           ;PIC18F4550_I2C_Source_File.c: 21: if(flag==0)
  2033  000F1A  5001               	movf	I2C_Read@flag,w,c
  2034  000F1C  A4D8               	btfss	status,2,c
  2035  000F1E  D003               	goto	l1292
  2036                           
  2037                           ;PIC18F4550_I2C_Source_File.c: 22: I2C_Ack();
  2038  000F20  ECDB  F007         	call	_I2C_Ack	;wreg free
  2039  000F24  D002               	goto	l164
  2040  000F26                     l1292:
  2041                           
  2042                           ;PIC18F4550_I2C_Source_File.c: 23: else
  2043                           ;PIC18F4550_I2C_Source_File.c: 24: I2C_Nack();
  2044  000F26  ECD6  F007         	call	_I2C_Nack	;wreg free
  2045  000F2A                     l164:
  2046                           
  2047                           ;PIC18F4550_I2C_Source_File.c: 25: I2C_Ready();
  2048  000F2A  ECE0  F007         	call	_I2C_Ready	;wreg free
  2049                           
  2050                           ;PIC18F4550_I2C_Source_File.c: 26: return(buffer);
  2051  000F2E  5002               	movf	I2C_Read@buffer,w,c
  2052  000F30  0012               	return	
  2053  000F32                     __end_of_I2C_Read:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           prodh	equ	0xFF4
  2060                           prodl	equ	0xFF3
  2061                           postinc0	equ	0xFEE
  2062                           wreg	equ	0xFE8
  2063                           postdec1	equ	0xFE5
  2064                           plusw1	equ	0xFE3
  2065                           fsr1l	equ	0xFE1
  2066                           indf2	equ	0xFDF
  2067                           postinc2	equ	0xFDE
  2068                           postdec2	equ	0xFDD
  2069                           plusw2	equ	0xFDB
  2070                           fsr2h	equ	0xFDA
  2071                           fsr2l	equ	0xFD9
  2072                           status	equ	0xFD8
  2073                           
  2074 ;; *************** function _I2C_Ready *****************
  2075 ;; Defined at:
  2076 ;;		line 43 in file "PIC18F4550_I2C_Source_File.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;		None
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;		None
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		None
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2090 ;;      Params:         0       0       0       0       0       0       0       0       0
  2091 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2092 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2093 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2094 ;;Total ram usage:        0 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_I2C_Read
  2100 ;;		_I2C_Write
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text10
  2105  000FC0                     __ptext10:
  2106                           	opt stack 0
  2107  000FC0                     _I2C_Ready:
  2108                           	opt stack 28
  2109  000FC0                     l171:
  2110  000FC0  A69E               	btfss	3998,3,c	;volatile
  2111  000FC2  D7FE               	goto	l171
  2112                           
  2113                           ;PIC18F4550_I2C_Source_File.c: 46: SSPIF=0;
  2114  000FC4  969E               	bcf	3998,3,c	;volatile
  2115  000FC6  0012               	return		;funcret
  2116  000FC8                     __end_of_I2C_Ready:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           tblptrh	equ	0xFF7
  2120                           tblptrl	equ	0xFF6
  2121                           tablat	equ	0xFF5
  2122                           prodh	equ	0xFF4
  2123                           prodl	equ	0xFF3
  2124                           postinc0	equ	0xFEE
  2125                           wreg	equ	0xFE8
  2126                           postdec1	equ	0xFE5
  2127                           plusw1	equ	0xFE3
  2128                           fsr1l	equ	0xFE1
  2129                           indf2	equ	0xFDF
  2130                           postinc2	equ	0xFDE
  2131                           postdec2	equ	0xFDD
  2132                           plusw2	equ	0xFDB
  2133                           fsr2h	equ	0xFDA
  2134                           fsr2l	equ	0xFD9
  2135                           status	equ	0xFD8
  2136                           
  2137 ;; *************** function _I2C_Nack *****************
  2138 ;; Defined at:
  2139 ;;		line 118 in file "PIC18F4550_I2C_Source_File.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;		None
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;		None
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  1    wreg      void 
  2146 ;; Registers used:
  2147 ;;		None
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2153 ;;      Params:         0       0       0       0       0       0       0       0       0
  2154 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2156 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2157 ;;Total ram usage:        0 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; This function calls:
  2160 ;;		Nothing
  2161 ;; This function is called by:
  2162 ;;		_I2C_Read
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text11
  2167  000FAC                     __ptext11:
  2168                           	opt stack 0
  2169  000FAC                     _I2C_Nack:
  2170                           	opt stack 28
  2171                           
  2172                           ;PIC18F4550_I2C_Source_File.c: 120: ACKDT=1;
  2173                           
  2174                           ;incstack = 0
  2175  000FAC  8AC5               	bsf	4037,5,c	;volatile
  2176                           
  2177                           ;PIC18F4550_I2C_Source_File.c: 121: ACKEN=1;
  2178  000FAE  88C5               	bsf	4037,4,c	;volatile
  2179  000FB0                     l222:
  2180  000FB0  A8C5               	btfss	4037,4,c	;volatile
  2181  000FB2  0012               	return	
  2182  000FB4  D7FD               	goto	l222
  2183  000FB6                     __end_of_I2C_Nack:
  2184                           	opt stack 0
  2185                           tblptru	equ	0xFF8
  2186                           tblptrh	equ	0xFF7
  2187                           tblptrl	equ	0xFF6
  2188                           tablat	equ	0xFF5
  2189                           prodh	equ	0xFF4
  2190                           prodl	equ	0xFF3
  2191                           postinc0	equ	0xFEE
  2192                           wreg	equ	0xFE8
  2193                           postdec1	equ	0xFE5
  2194                           plusw1	equ	0xFE3
  2195                           fsr1l	equ	0xFE1
  2196                           indf2	equ	0xFDF
  2197                           postinc2	equ	0xFDE
  2198                           postdec2	equ	0xFDD
  2199                           plusw2	equ	0xFDB
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _I2C_Ack *****************
  2205 ;; Defined at:
  2206 ;;		line 111 in file "PIC18F4550_I2C_Source_File.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;		None
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;		None
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  1    wreg      void 
  2213 ;; Registers used:
  2214 ;;		None
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2220 ;;      Params:         0       0       0       0       0       0       0       0       0
  2221 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2223 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2224 ;;Total ram usage:        0 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; This function calls:
  2227 ;;		Nothing
  2228 ;; This function is called by:
  2229 ;;		_I2C_Read
  2230 ;; This function uses a non-reentrant model
  2231 ;;
  2232                           
  2233                           	psect	text12
  2234  000FB6                     __ptext12:
  2235                           	opt stack 0
  2236  000FB6                     _I2C_Ack:
  2237                           	opt stack 28
  2238                           
  2239                           ;PIC18F4550_I2C_Source_File.c: 113: ACKDT=0;
  2240                           
  2241                           ;incstack = 0
  2242  000FB6  9AC5               	bcf	4037,5,c	;volatile
  2243                           
  2244                           ;PIC18F4550_I2C_Source_File.c: 114: ACKEN=1;
  2245  000FB8  88C5               	bsf	4037,4,c	;volatile
  2246  000FBA                     l216:
  2247  000FBA  A8C5               	btfss	4037,4,c	;volatile
  2248  000FBC  0012               	return	
  2249  000FBE  D7FD               	goto	l216
  2250  000FC0                     __end_of_I2C_Ack:
  2251                           	opt stack 0
  2252                           tblptru	equ	0xFF8
  2253                           tblptrh	equ	0xFF7
  2254                           tblptrl	equ	0xFF6
  2255                           tablat	equ	0xFF5
  2256                           prodh	equ	0xFF4
  2257                           prodl	equ	0xFF3
  2258                           postinc0	equ	0xFEE
  2259                           wreg	equ	0xFE8
  2260                           postdec1	equ	0xFE5
  2261                           plusw1	equ	0xFE3
  2262                           fsr1l	equ	0xFE1
  2263                           indf2	equ	0xFDF
  2264                           postinc2	equ	0xFDE
  2265                           postdec2	equ	0xFDD
  2266                           plusw2	equ	0xFDB
  2267                           fsr2h	equ	0xFDA
  2268                           fsr2l	equ	0xFD9
  2269                           status	equ	0xFD8
  2270                           
  2271 ;; *************** function _LCD_String_xy *****************
  2272 ;; Defined at:
  2273 ;;		line 63 in file "LCD_16x2_4bit_mode.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;  row             1    wreg     unsigned char 
  2276 ;;  pos             1   10[COMRAM] unsigned char 
  2277 ;;  msg             2   11[COMRAM] PTR const unsigned char 
  2278 ;;		 -> main@date(10), main@hours(10), STR_2(3), STR_1(3), 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  row             1   13[COMRAM] unsigned char 
  2281 ;;  location        1   14[COMRAM] unsigned char 
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2291 ;;      Params:         3       0       0       0       0       0       0       0       0
  2292 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2294 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2295 ;;Total ram usage:        5 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:    3
  2298 ;; This function calls:
  2299 ;;		_LCD_Command
  2300 ;;		_LCD_String
  2301 ;; This function is called by:
  2302 ;;		_main
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text13
  2307  000E70                     __ptext13:
  2308                           	opt stack 0
  2309  000E70                     _LCD_String_xy:
  2310                           	opt stack 27
  2311                           
  2312                           ;incstack = 0
  2313                           ;LCD_String_xy@row stored from wreg
  2314  000E70  6E0E               	movwf	LCD_String_xy@row,c
  2315                           
  2316                           ;LCD_16x2_4bit_mode.c: 65: char location=0;
  2317  000E72  0E00               	movlw	0
  2318  000E74  6E0F               	movwf	LCD_String_xy@location,c
  2319                           
  2320                           ;LCD_16x2_4bit_mode.c: 66: if(row<=1)
  2321  000E76  0E02               	movlw	2
  2322  000E78  600E               	cpfslt	LCD_String_xy@row,c
  2323  000E7A  D008               	goto	l1402
  2324                           
  2325                           ;LCD_16x2_4bit_mode.c: 67: {
  2326                           ;LCD_16x2_4bit_mode.c: 68: location = (0x80) | ((pos) & 0x0f);
  2327  000E7C  500B               	movf	LCD_String_xy@pos,w,c
  2328  000E7E  0B0F               	andlw	15
  2329  000E80  0980               	iorlw	128
  2330  000E82  6E0F               	movwf	LCD_String_xy@location,c
  2331                           
  2332                           ;LCD_16x2_4bit_mode.c: 69: LCD_Command(location);
  2333  000E84  500F               	movf	LCD_String_xy@location,w,c
  2334  000E86  ECD3  F006         	call	_LCD_Command
  2335                           
  2336                           ;LCD_16x2_4bit_mode.c: 70: }
  2337  000E8A  D007               	goto	l1406
  2338  000E8C                     l1402:
  2339                           
  2340                           ;LCD_16x2_4bit_mode.c: 71: else
  2341                           ;LCD_16x2_4bit_mode.c: 72: {
  2342                           ;LCD_16x2_4bit_mode.c: 73: location = (0xC0) | ((pos) & 0x0f);
  2343  000E8C  500B               	movf	LCD_String_xy@pos,w,c
  2344  000E8E  0B0F               	andlw	15
  2345  000E90  09C0               	iorlw	192
  2346  000E92  6E0F               	movwf	LCD_String_xy@location,c
  2347                           
  2348                           ;LCD_16x2_4bit_mode.c: 74: LCD_Command(location);
  2349  000E94  500F               	movf	LCD_String_xy@location,w,c
  2350  000E96  ECD3  F006         	call	_LCD_Command
  2351  000E9A                     l1406:
  2352                           
  2353                           ;LCD_16x2_4bit_mode.c: 75: }
  2354                           ;LCD_16x2_4bit_mode.c: 78: LCD_String(msg);
  2355  000E9A  C00C  F009         	movff	LCD_String_xy@msg,LCD_String@msg
  2356  000E9E  C00D  F00A         	movff	LCD_String_xy@msg+1,LCD_String@msg+1
  2357  000EA2  EC84  F006         	call	_LCD_String	;wreg free
  2358  000EA6  0012               	return		;funcret
  2359  000EA8                     __end_of_LCD_String_xy:
  2360                           	opt stack 0
  2361                           tblptru	equ	0xFF8
  2362                           tblptrh	equ	0xFF7
  2363                           tblptrl	equ	0xFF6
  2364                           tablat	equ	0xFF5
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           postdec1	equ	0xFE5
  2370                           plusw1	equ	0xFE3
  2371                           fsr1l	equ	0xFE1
  2372                           indf2	equ	0xFDF
  2373                           postinc2	equ	0xFDE
  2374                           postdec2	equ	0xFDD
  2375                           plusw2	equ	0xFDB
  2376                           fsr2h	equ	0xFDA
  2377                           fsr2l	equ	0xFD9
  2378                           status	equ	0xFD8
  2379                           
  2380 ;; *************** function _LCD_String *****************
  2381 ;; Defined at:
  2382 ;;		line 53 in file "LCD_16x2_4bit_mode.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;  msg             2    8[COMRAM] PTR const unsigned char 
  2385 ;;		 -> STR_18(4), STR_17(4), STR_16(4), STR_15(4), 
  2386 ;;		 -> STR_14(4), STR_13(4), STR_12(4), main@year(10), 
  2387 ;;		 -> main@month(10), main@date(10), main@hours(10), main@mins(10), 
  2388 ;;		 -> main@secs(10), STR_2(3), STR_1(3), 
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;		None
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2400 ;;      Params:         2       0       0       0       0       0       0       0       0
  2401 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2402 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2403 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2404 ;;Total ram usage:        2 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    2
  2407 ;; This function calls:
  2408 ;;		_LCD_Char
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;;		_LCD_String_xy
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text14
  2416  000D08                     __ptext14:
  2417                           	opt stack 0
  2418  000D08                     _LCD_String:
  2419                           	opt stack 27
  2420                           
  2421                           ;LCD_16x2_4bit_mode.c: 55: while((*msg)!=0)
  2422                           
  2423                           ;incstack = 0
  2424  000D08  D014               	goto	l1306
  2425  000D0A                     l1302:
  2426                           
  2427                           ;LCD_16x2_4bit_mode.c: 56: {
  2428                           ;LCD_16x2_4bit_mode.c: 57: LCD_Char(*msg);
  2429  000D0A  C009  FFF6         	movff	LCD_String@msg,tblptrl
  2430  000D0E  C00A  FFF7         	movff	LCD_String@msg+1,tblptrh
  2431  000D12  6AF8               	clrf	tblptru,c
  2432  000D14  0E07               	movlw	(high __ramtop+-1)
  2433  000D16  64F7               	cpfsgt	tblptrh,c
  2434  000D18  D003               	bra	u507
  2435  000D1A  0008               	tblrd		*
  2436  000D1C  50F5               	movf	tablat,w,c
  2437  000D1E  D005               	bra	u500
  2438  000D20                     u507:
  2439  000D20  CFF6 FFE9          	movff	tblptrl,fsr0l
  2440  000D24  CFF7 FFEA          	movff	tblptrh,fsr0h
  2441  000D28  50EF               	movf	indf0,w,c
  2442  000D2A                     u500:
  2443  000D2A  ECAD  F006         	call	_LCD_Char
  2444                           
  2445                           ;LCD_16x2_4bit_mode.c: 58: msg++;
  2446  000D2E  4A09               	infsnz	LCD_String@msg,f,c
  2447  000D30  2A0A               	incf	LCD_String@msg+1,f,c
  2448  000D32                     l1306:
  2449  000D32  C009  FFF6         	movff	LCD_String@msg,tblptrl
  2450  000D36  C00A  FFF7         	movff	LCD_String@msg+1,tblptrh
  2451  000D3A  6AF8               	clrf	tblptru,c
  2452  000D3C  0E07               	movlw	(high __ramtop+-1)
  2453  000D3E  64F7               	cpfsgt	tblptrh,c
  2454  000D40  D003               	bra	u517
  2455  000D42  0008               	tblrd		*
  2456  000D44  50F5               	movf	tablat,w,c
  2457  000D46  D005               	bra	u510
  2458  000D48                     u517:
  2459  000D48  CFF6 FFE9          	movff	tblptrl,fsr0l
  2460  000D4C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2461  000D50  50EF               	movf	indf0,w,c
  2462  000D52                     u510:
  2463  000D52  0900               	iorlw	0
  2464  000D54  B4D8               	btfsc	status,2,c
  2465  000D56  0012               	return	
  2466  000D58  D7D8               	goto	l1302
  2467  000D5A                     __end_of_LCD_String:
  2468                           	opt stack 0
  2469                           tblptru	equ	0xFF8
  2470                           tblptrh	equ	0xFF7
  2471                           tblptrl	equ	0xFF6
  2472                           tablat	equ	0xFF5
  2473                           prodh	equ	0xFF4
  2474                           prodl	equ	0xFF3
  2475                           indf0	equ	0xFEF
  2476                           postinc0	equ	0xFEE
  2477                           fsr0h	equ	0xFEA
  2478                           fsr0l	equ	0xFE9
  2479                           wreg	equ	0xFE8
  2480                           postdec1	equ	0xFE5
  2481                           plusw1	equ	0xFE3
  2482                           fsr1l	equ	0xFE1
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           postdec2	equ	0xFDD
  2486                           plusw2	equ	0xFDB
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _LCD_Char *****************
  2492 ;; Defined at:
  2493 ;;		line 39 in file "LCD_16x2_4bit_mode.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;  dat             1    wreg     unsigned char 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  dat             1    7[COMRAM] unsigned char 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      void 
  2500 ;; Registers used:
  2501 ;;		wreg, status,2, status,0, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2507 ;;      Params:         0       0       0       0       0       0       0       0       0
  2508 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2509 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2510 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2511 ;;Total ram usage:        2 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    1
  2514 ;; This function calls:
  2515 ;;		_MSdelay
  2516 ;; This function is called by:
  2517 ;;		_LCD_String
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           	psect	text15
  2522  000D5A                     __ptext15:
  2523                           	opt stack 0
  2524  000D5A                     _LCD_Char:
  2525                           	opt stack 27
  2526                           
  2527                           ;incstack = 0
  2528                           ;LCD_Char@dat stored from wreg
  2529  000D5A  6E08               	movwf	LCD_Char@dat,c
  2530                           
  2531                           ;LCD_16x2_4bit_mode.c: 41: LATD = (LATD & 0x0f) | (0xF0 & dat);
  2532  000D5C  C008  F007         	movff	LCD_Char@dat,??_LCD_Char
  2533  000D60  0EF0               	movlw	240
  2534  000D62  1607               	andwf	??_LCD_Char,f,c
  2535  000D64  508C               	movf	3980,w,c	;volatile
  2536  000D66  0B0F               	andlw	15
  2537  000D68  1007               	iorwf	??_LCD_Char,w,c
  2538  000D6A  6E8C               	movwf	3980,c	;volatile
  2539                           
  2540                           ;LCD_16x2_4bit_mode.c: 42: LATD2 = 1;
  2541  000D6C  848C               	bsf	3980,2,c	;volatile
  2542                           
  2543                           ;LCD_16x2_4bit_mode.c: 43: LATD3 = 1;
  2544  000D6E  868C               	bsf	3980,3,c	;volatile
  2545                           
  2546                           ;LCD_16x2_4bit_mode.c: 44: __nop();
  2547  000D70  F000               	nop	
  2548                           
  2549                           ;LCD_16x2_4bit_mode.c: 45: LATD3 = 0;
  2550  000D72  968C               	bcf	3980,3,c	;volatile
  2551                           
  2552                           ;LCD_16x2_4bit_mode.c: 46: MSdelay(1);
  2553  000D74  0E00               	movlw	0
  2554  000D76  6E02               	movwf	MSdelay@val+1,c
  2555  000D78  0E01               	movlw	1
  2556  000D7A  6E01               	movwf	MSdelay@val,c
  2557  000D7C  EC54  F007         	call	_MSdelay	;wreg free
  2558                           
  2559                           ;LCD_16x2_4bit_mode.c: 47: LATD = (LATD & 0x0f) | (dat<<4);
  2560  000D80  C008  F007         	movff	LCD_Char@dat,??_LCD_Char
  2561  000D84  3A07               	swapf	??_LCD_Char,f,c
  2562  000D86  0EF0               	movlw	240
  2563  000D88  1607               	andwf	??_LCD_Char,f,c
  2564  000D8A  508C               	movf	3980,w,c	;volatile
  2565  000D8C  0B0F               	andlw	15
  2566  000D8E  1007               	iorwf	??_LCD_Char,w,c
  2567  000D90  6E8C               	movwf	3980,c	;volatile
  2568                           
  2569                           ;LCD_16x2_4bit_mode.c: 48: LATD3 = 1;
  2570  000D92  868C               	bsf	3980,3,c	;volatile
  2571                           
  2572                           ;LCD_16x2_4bit_mode.c: 49: __nop();
  2573  000D94  F000               	nop	
  2574                           
  2575                           ;LCD_16x2_4bit_mode.c: 50: LATD3 = 0;
  2576  000D96  968C               	bcf	3980,3,c	;volatile
  2577                           
  2578                           ;LCD_16x2_4bit_mode.c: 51: MSdelay(3);
  2579  000D98  0E00               	movlw	0
  2580  000D9A  6E02               	movwf	MSdelay@val+1,c
  2581  000D9C  0E03               	movlw	3
  2582  000D9E  6E01               	movwf	MSdelay@val,c
  2583  000DA0  EC54  F007         	call	_MSdelay	;wreg free
  2584  000DA4  0012               	return		;funcret
  2585  000DA6                     __end_of_LCD_Char:
  2586                           	opt stack 0
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           prodh	equ	0xFF4
  2592                           prodl	equ	0xFF3
  2593                           indf0	equ	0xFEF
  2594                           postinc0	equ	0xFEE
  2595                           fsr0h	equ	0xFEA
  2596                           fsr0l	equ	0xFE9
  2597                           wreg	equ	0xFE8
  2598                           postdec1	equ	0xFE5
  2599                           plusw1	equ	0xFE3
  2600                           fsr1l	equ	0xFE1
  2601                           indf2	equ	0xFDF
  2602                           postinc2	equ	0xFDE
  2603                           postdec2	equ	0xFDD
  2604                           plusw2	equ	0xFDB
  2605                           fsr2h	equ	0xFDA
  2606                           fsr2l	equ	0xFD9
  2607                           status	equ	0xFD8
  2608                           
  2609 ;; *************** function _LCD_Init *****************
  2610 ;; Defined at:
  2611 ;;		line 8 in file "LCD_16x2_4bit_mode.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;		None
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;		None
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, status,2, status,0, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2625 ;;      Params:         0       0       0       0       0       0       0       0       0
  2626 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2627 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2628 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2629 ;;Total ram usage:        0 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    2
  2632 ;; This function calls:
  2633 ;;		_LCD_Command
  2634 ;;		_MSdelay
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           	psect	text16
  2641  000EDE                     __ptext16:
  2642                           	opt stack 0
  2643  000EDE                     _LCD_Init:
  2644                           	opt stack 28
  2645                           
  2646                           ;LCD_16x2_4bit_mode.c: 10: TRISD = 0;
  2647                           
  2648                           ;incstack = 0
  2649  000EDE  0E00               	movlw	0
  2650  000EE0  6E95               	movwf	3989,c	;volatile
  2651                           
  2652                           ;LCD_16x2_4bit_mode.c: 11: MSdelay(20);
  2653  000EE2  0E00               	movlw	0
  2654  000EE4  6E02               	movwf	MSdelay@val+1,c
  2655  000EE6  0E14               	movlw	20
  2656  000EE8  6E01               	movwf	MSdelay@val,c
  2657  000EEA  EC54  F007         	call	_MSdelay	;wreg free
  2658                           
  2659                           ;LCD_16x2_4bit_mode.c: 12: LCD_Command(0x02);
  2660  000EEE  0E02               	movlw	2
  2661  000EF0  ECD3  F006         	call	_LCD_Command
  2662                           
  2663                           ;LCD_16x2_4bit_mode.c: 14: LCD_Command(0x28);
  2664  000EF4  0E28               	movlw	40
  2665  000EF6  ECD3  F006         	call	_LCD_Command
  2666                           
  2667                           ;LCD_16x2_4bit_mode.c: 16: LCD_Command(0x01);
  2668  000EFA  0E01               	movlw	1
  2669  000EFC  ECD3  F006         	call	_LCD_Command
  2670                           
  2671                           ;LCD_16x2_4bit_mode.c: 17: LCD_Command(0x0c);
  2672  000F00  0E0C               	movlw	12
  2673  000F02  ECD3  F006         	call	_LCD_Command
  2674                           
  2675                           ;LCD_16x2_4bit_mode.c: 18: LCD_Command(0x06);
  2676  000F06  0E06               	movlw	6
  2677  000F08  ECD3  F006         	call	_LCD_Command
  2678  000F0C  0012               	return		;funcret
  2679  000F0E                     __end_of_LCD_Init:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           prodh	equ	0xFF4
  2686                           prodl	equ	0xFF3
  2687                           indf0	equ	0xFEF
  2688                           postinc0	equ	0xFEE
  2689                           fsr0h	equ	0xFEA
  2690                           fsr0l	equ	0xFE9
  2691                           wreg	equ	0xFE8
  2692                           postdec1	equ	0xFE5
  2693                           plusw1	equ	0xFE3
  2694                           fsr1l	equ	0xFE1
  2695                           indf2	equ	0xFDF
  2696                           postinc2	equ	0xFDE
  2697                           postdec2	equ	0xFDD
  2698                           plusw2	equ	0xFDB
  2699                           fsr2h	equ	0xFDA
  2700                           fsr2l	equ	0xFD9
  2701                           status	equ	0xFD8
  2702                           
  2703 ;; *************** function _LCD_Clear *****************
  2704 ;; Defined at:
  2705 ;;		line 82 in file "LCD_16x2_4bit_mode.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, status,0, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 0/0
  2716 ;;		On exit  : 0/0
  2717 ;;		Unchanged: 0/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2719 ;;      Params:         0       0       0       0       0       0       0       0       0
  2720 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2721 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2722 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2723 ;;Total ram usage:        0 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:    2
  2726 ;; This function calls:
  2727 ;;		_LCD_Command
  2728 ;;		_MSdelay
  2729 ;; This function is called by:
  2730 ;;		_main
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           	psect	text17
  2735  000F8E                     __ptext17:
  2736                           	opt stack 0
  2737  000F8E                     _LCD_Clear:
  2738                           	opt stack 28
  2739                           
  2740                           ;LCD_16x2_4bit_mode.c: 84: LCD_Command(0x01);
  2741                           
  2742                           ;incstack = 0
  2743  000F8E  0E01               	movlw	1
  2744  000F90  ECD3  F006         	call	_LCD_Command
  2745                           
  2746                           ;LCD_16x2_4bit_mode.c: 85: MSdelay(3);
  2747  000F94  0E00               	movlw	0
  2748  000F96  6E02               	movwf	MSdelay@val+1,c
  2749  000F98  0E03               	movlw	3
  2750  000F9A  6E01               	movwf	MSdelay@val,c
  2751  000F9C  EC54  F007         	call	_MSdelay	;wreg free
  2752  000FA0  0012               	return		;funcret
  2753  000FA2                     __end_of_LCD_Clear:
  2754                           	opt stack 0
  2755                           tblptru	equ	0xFF8
  2756                           tblptrh	equ	0xFF7
  2757                           tblptrl	equ	0xFF6
  2758                           tablat	equ	0xFF5
  2759                           prodh	equ	0xFF4
  2760                           prodl	equ	0xFF3
  2761                           indf0	equ	0xFEF
  2762                           postinc0	equ	0xFEE
  2763                           fsr0h	equ	0xFEA
  2764                           fsr0l	equ	0xFE9
  2765                           wreg	equ	0xFE8
  2766                           postdec1	equ	0xFE5
  2767                           plusw1	equ	0xFE3
  2768                           fsr1l	equ	0xFE1
  2769                           indf2	equ	0xFDF
  2770                           postinc2	equ	0xFDE
  2771                           postdec2	equ	0xFDD
  2772                           plusw2	equ	0xFDB
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _LCD_Command *****************
  2778 ;; Defined at:
  2779 ;;		line 21 in file "LCD_16x2_4bit_mode.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  cmd             1    wreg     unsigned char 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;  cmd             1    7[COMRAM] unsigned char 
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  1    wreg      void 
  2786 ;; Registers used:
  2787 ;;		wreg, status,2, status,0, cstack
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2793 ;;      Params:         0       0       0       0       0       0       0       0       0
  2794 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2795 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2796 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2797 ;;Total ram usage:        2 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:    1
  2800 ;; This function calls:
  2801 ;;		_MSdelay
  2802 ;; This function is called by:
  2803 ;;		_LCD_Init
  2804 ;;		_LCD_String_xy
  2805 ;;		_LCD_Clear
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text18
  2810  000DA6                     __ptext18:
  2811                           	opt stack 0
  2812  000DA6                     _LCD_Command:
  2813                           	opt stack 28
  2814                           
  2815                           ;incstack = 0
  2816                           ;LCD_Command@cmd stored from wreg
  2817  000DA6  6E08               	movwf	LCD_Command@cmd,c
  2818                           
  2819                           ;LCD_16x2_4bit_mode.c: 23: LATD = (LATD & 0x0f) |(0xF0 & cmd);
  2820  000DA8  C008  F007         	movff	LCD_Command@cmd,??_LCD_Command
  2821  000DAC  0EF0               	movlw	240
  2822  000DAE  1607               	andwf	??_LCD_Command,f,c
  2823  000DB0  508C               	movf	3980,w,c	;volatile
  2824  000DB2  0B0F               	andlw	15
  2825  000DB4  1007               	iorwf	??_LCD_Command,w,c
  2826  000DB6  6E8C               	movwf	3980,c	;volatile
  2827                           
  2828                           ;LCD_16x2_4bit_mode.c: 24: LATD2 = 0;
  2829  000DB8  948C               	bcf	3980,2,c	;volatile
  2830                           
  2831                           ;LCD_16x2_4bit_mode.c: 25: LATD3 = 1;
  2832  000DBA  868C               	bsf	3980,3,c	;volatile
  2833                           
  2834                           ;LCD_16x2_4bit_mode.c: 26: __nop();
  2835  000DBC  F000               	nop	
  2836                           
  2837                           ;LCD_16x2_4bit_mode.c: 27: LATD3 = 0;
  2838  000DBE  968C               	bcf	3980,3,c	;volatile
  2839                           
  2840                           ;LCD_16x2_4bit_mode.c: 28: MSdelay(1);
  2841  000DC0  0E00               	movlw	0
  2842  000DC2  6E02               	movwf	MSdelay@val+1,c
  2843  000DC4  0E01               	movlw	1
  2844  000DC6  6E01               	movwf	MSdelay@val,c
  2845  000DC8  EC54  F007         	call	_MSdelay	;wreg free
  2846                           
  2847                           ;LCD_16x2_4bit_mode.c: 29: LATD = (LATD & 0x0f) | (cmd<<4);
  2848  000DCC  C008  F007         	movff	LCD_Command@cmd,??_LCD_Command
  2849  000DD0  3A07               	swapf	??_LCD_Command,f,c
  2850  000DD2  0EF0               	movlw	240
  2851  000DD4  1607               	andwf	??_LCD_Command,f,c
  2852  000DD6  508C               	movf	3980,w,c	;volatile
  2853  000DD8  0B0F               	andlw	15
  2854  000DDA  1007               	iorwf	??_LCD_Command,w,c
  2855  000DDC  6E8C               	movwf	3980,c	;volatile
  2856                           
  2857                           ;LCD_16x2_4bit_mode.c: 30: LATD3 = 1;
  2858  000DDE  868C               	bsf	3980,3,c	;volatile
  2859                           
  2860                           ;LCD_16x2_4bit_mode.c: 31: __nop();
  2861  000DE0  F000               	nop	
  2862                           
  2863                           ;LCD_16x2_4bit_mode.c: 32: LATD3 = 0;
  2864  000DE2  968C               	bcf	3980,3,c	;volatile
  2865                           
  2866                           ;LCD_16x2_4bit_mode.c: 33: MSdelay(3);
  2867  000DE4  0E00               	movlw	0
  2868  000DE6  6E02               	movwf	MSdelay@val+1,c
  2869  000DE8  0E03               	movlw	3
  2870  000DEA  6E01               	movwf	MSdelay@val,c
  2871  000DEC  EC54  F007         	call	_MSdelay	;wreg free
  2872  000DF0  0012               	return		;funcret
  2873  000DF2                     __end_of_LCD_Command:
  2874                           	opt stack 0
  2875                           tblptru	equ	0xFF8
  2876                           tblptrh	equ	0xFF7
  2877                           tblptrl	equ	0xFF6
  2878                           tablat	equ	0xFF5
  2879                           prodh	equ	0xFF4
  2880                           prodl	equ	0xFF3
  2881                           indf0	equ	0xFEF
  2882                           postinc0	equ	0xFEE
  2883                           fsr0h	equ	0xFEA
  2884                           fsr0l	equ	0xFE9
  2885                           wreg	equ	0xFE8
  2886                           postdec1	equ	0xFE5
  2887                           plusw1	equ	0xFE3
  2888                           fsr1l	equ	0xFE1
  2889                           indf2	equ	0xFDF
  2890                           postinc2	equ	0xFDE
  2891                           postdec2	equ	0xFDD
  2892                           plusw2	equ	0xFDB
  2893                           fsr2h	equ	0xFDA
  2894                           fsr2l	equ	0xFD9
  2895                           status	equ	0xFD8
  2896                           
  2897 ;; *************** function _MSdelay *****************
  2898 ;; Defined at:
  2899 ;;		line 88 in file "LCD_16x2_4bit_mode.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  val             2    0[COMRAM] unsigned int 
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;  j               2    4[COMRAM] unsigned int 
  2904 ;;  i               2    2[COMRAM] unsigned int 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2914 ;;      Params:         2       0       0       0       0       0       0       0       0
  2915 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2917 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2918 ;;Total ram usage:        6 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; This function calls:
  2921 ;;		Nothing
  2922 ;; This function is called by:
  2923 ;;		_main
  2924 ;;		_LCD_Init
  2925 ;;		_LCD_Command
  2926 ;;		_LCD_Char
  2927 ;;		_LCD_Clear
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text19
  2932  000EA8                     __ptext19:
  2933                           	opt stack 0
  2934  000EA8                     _MSdelay:
  2935                           	opt stack 30
  2936                           
  2937                           ;LCD_16x2_4bit_mode.c: 90: unsigned int i,j;
  2938                           ;LCD_16x2_4bit_mode.c: 91: for(i=0;i<val;i++)
  2939                           
  2940                           ;incstack = 0
  2941  000EA8  0E00               	movlw	0
  2942  000EAA  6E04               	movwf	MSdelay@i+1,c
  2943  000EAC  0E00               	movlw	0
  2944  000EAE  6E03               	movwf	MSdelay@i,c
  2945  000EB0  D00F               	goto	l1222
  2946  000EB2                     l1210:
  2947                           
  2948                           ;LCD_16x2_4bit_mode.c: 92: for(j=0;j<165;j++);
  2949  000EB2  0E00               	movlw	0
  2950  000EB4  6E06               	movwf	MSdelay@j+1,c
  2951  000EB6  0E00               	movlw	0
  2952  000EB8  6E05               	movwf	MSdelay@j,c
  2953  000EBA                     l1212:
  2954  000EBA  5006               	movf	MSdelay@j+1,w,c
  2955  000EBC  E107               	bnz	l1220
  2956  000EBE  0EA5               	movlw	165
  2957  000EC0  5C05               	subwf	MSdelay@j,w,c
  2958  000EC2  B0D8               	btfsc	status,0,c
  2959  000EC4  D003               	goto	l1220
  2960  000EC6  4A05               	infsnz	MSdelay@j,f,c
  2961  000EC8  2A06               	incf	MSdelay@j+1,f,c
  2962  000ECA  D7F7               	goto	l1212
  2963  000ECC                     l1220:
  2964  000ECC  4A03               	infsnz	MSdelay@i,f,c
  2965  000ECE  2A04               	incf	MSdelay@i+1,f,c
  2966  000ED0                     l1222:
  2967  000ED0  5001               	movf	MSdelay@val,w,c
  2968  000ED2  5C03               	subwf	MSdelay@i,w,c
  2969  000ED4  5002               	movf	MSdelay@val+1,w,c
  2970  000ED6  5804               	subwfb	MSdelay@i+1,w,c
  2971  000ED8  B0D8               	btfsc	status,0,c
  2972  000EDA  0012               	return	
  2973  000EDC  D7EA               	goto	l1210
  2974  000EDE                     __end_of_MSdelay:
  2975                           	opt stack 0
  2976                           tblptru	equ	0xFF8
  2977                           tblptrh	equ	0xFF7
  2978                           tblptrl	equ	0xFF6
  2979                           tablat	equ	0xFF5
  2980                           prodh	equ	0xFF4
  2981                           prodl	equ	0xFF3
  2982                           indf0	equ	0xFEF
  2983                           postinc0	equ	0xFEE
  2984                           fsr0h	equ	0xFEA
  2985                           fsr0l	equ	0xFE9
  2986                           wreg	equ	0xFE8
  2987                           postdec1	equ	0xFE5
  2988                           plusw1	equ	0xFE3
  2989                           fsr1l	equ	0xFE1
  2990                           indf2	equ	0xFDF
  2991                           postinc2	equ	0xFDE
  2992                           postdec2	equ	0xFDD
  2993                           plusw2	equ	0xFDB
  2994                           fsr2h	equ	0xFDA
  2995                           fsr2l	equ	0xFD9
  2996                           status	equ	0xFD8
  2997                           
  2998 ;; *************** function _I2C_Init *****************
  2999 ;; Defined at:
  3000 ;;		line 29 in file "PIC18F4550_I2C_Source_File.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;		None
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;		None
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3014 ;;      Params:         0       0       0       0       0       0       0       0       0
  3015 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3017 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3018 ;;Total ram usage:        0 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_main
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text20
  3028  000F32                     __ptext20:
  3029                           	opt stack 0
  3030  000F32                     _I2C_Init:
  3031                           	opt stack 30
  3032                           
  3033                           ;PIC18F4550_I2C_Source_File.c: 31: TRISB0=1;
  3034                           
  3035                           ;incstack = 0
  3036  000F32  8093               	bsf	3987,0,c	;volatile
  3037                           
  3038                           ;PIC18F4550_I2C_Source_File.c: 32: TRISB1=1;
  3039  000F34  8293               	bsf	3987,1,c	;volatile
  3040                           
  3041                           ;PIC18F4550_I2C_Source_File.c: 33: SSPSTAT=80;
  3042  000F36  0E50               	movlw	80
  3043  000F38  6EC7               	movwf	4039,c	;volatile
  3044                           
  3045                           ;PIC18F4550_I2C_Source_File.c: 34: SSPCON1=0x28;
  3046  000F3A  0E28               	movlw	40
  3047  000F3C  6EC6               	movwf	4038,c	;volatile
  3048                           
  3049                           ;PIC18F4550_I2C_Source_File.c: 36: SSPCON2=0;
  3050  000F3E  0E00               	movlw	0
  3051  000F40  6EC5               	movwf	4037,c	;volatile
  3052                           
  3053                           ;PIC18F4550_I2C_Source_File.c: 37: SSPADD=((8000000/(4*100000))-1);
  3054  000F42  0E13               	movlw	19
  3055  000F44  6EC8               	movwf	4040,c	;volatile
  3056                           
  3057                           ;PIC18F4550_I2C_Source_File.c: 38: SSPIE=1;
  3058  000F46  869D               	bsf	3997,3,c	;volatile
  3059                           
  3060                           ;PIC18F4550_I2C_Source_File.c: 39: SSPIF=0;
  3061  000F48  969E               	bcf	3998,3,c	;volatile
  3062  000F4A  0012               	return		;funcret
  3063  000F4C                     __end_of_I2C_Init:
  3064                           	opt stack 0
  3065                           tblptru	equ	0xFF8
  3066                           tblptrh	equ	0xFF7
  3067                           tblptrl	equ	0xFF6
  3068                           tablat	equ	0xFF5
  3069                           prodh	equ	0xFF4
  3070                           prodl	equ	0xFF3
  3071                           indf0	equ	0xFEF
  3072                           postinc0	equ	0xFEE
  3073                           fsr0h	equ	0xFEA
  3074                           fsr0l	equ	0xFE9
  3075                           wreg	equ	0xFE8
  3076                           postdec1	equ	0xFE5
  3077                           plusw1	equ	0xFE3
  3078                           fsr1l	equ	0xFE1
  3079                           indf2	equ	0xFDF
  3080                           postinc2	equ	0xFDE
  3081                           postdec2	equ	0xFDD
  3082                           plusw2	equ	0xFDB
  3083                           fsr2h	equ	0xFDA
  3084                           fsr2l	equ	0xFD9
  3085                           status	equ	0xFD8
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           prodh	equ	0xFF4
  3091                           prodl	equ	0xFF3
  3092                           indf0	equ	0xFEF
  3093                           postinc0	equ	0xFEE
  3094                           fsr0h	equ	0xFEA
  3095                           fsr0l	equ	0xFE9
  3096                           wreg	equ	0xFE8
  3097                           postdec1	equ	0xFE5
  3098                           plusw1	equ	0xFE3
  3099                           fsr1l	equ	0xFE1
  3100                           indf2	equ	0xFDF
  3101                           postinc2	equ	0xFDE
  3102                           postdec2	equ	0xFDD
  3103                           plusw2	equ	0xFDB
  3104                           fsr2h	equ	0xFDA
  3105                           fsr2l	equ	0xFD9
  3106                           status	equ	0xFD8
  3107                           
  3108                           	psect	rparam
  3109  0000                     tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           indf0	equ	0xFEF
  3116                           postinc0	equ	0xFEE
  3117                           fsr0h	equ	0xFEA
  3118                           fsr0l	equ	0xFE9
  3119                           wreg	equ	0xFE8
  3120                           postdec1	equ	0xFE5
  3121                           plusw1	equ	0xFE3
  3122                           fsr1l	equ	0xFE1
  3123                           indf2	equ	0xFDF
  3124                           postinc2	equ	0xFDE
  3125                           postdec2	equ	0xFDD
  3126                           plusw2	equ	0xFDB
  3127                           fsr2h	equ	0xFDA
  3128                           fsr2l	equ	0xFD9
  3129                           status	equ	0xFD8


Data Sizes:
    Strings     71
    Constant    8
    Data        7
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      95
    BANK0           160      0      19
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[8]), STR_8(CODE[8]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[8]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> main@year(COMRAM[10]), main@month(COMRAM[10]), main@date(COMRAM[10]), main@hours(COMRAM[10]), 
		 -> main@mins(COMRAM[10]), main@secs(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCD_String_xy@msg	PTR const unsigned char  size(2) Largest target is 10
		 -> main@date(COMRAM[10]), main@hours(COMRAM[10]), STR_2(CODE[3]), STR_1(CODE[3]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), main@year(COMRAM[10]), 
		 -> main@month(COMRAM[10]), main@date(COMRAM[10]), main@hours(COMRAM[10]), main@mins(COMRAM[10]), 
		 -> main@secs(COMRAM[10]), STR_2(CODE[3]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwdiv
    _RTC_Read_Clock->_I2C_Read
    _RTC_Read_Clock->_I2C_Repeated_Start
    _RTC_Read_Clock->_I2C_Start
    _RTC_Read_Calendar->_I2C_Read
    _RTC_Read_Calendar->_I2C_Repeated_Start
    _RTC_Read_Calendar->_I2C_Start
    _I2C_Start->_I2C_Write
    _I2C_Repeated_Start->_I2C_Write
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Clear->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                72    72      0    9917
                                             21 COMRAM    72    72      0
                           _I2C_Init
                           _I2C_Stop
                          _LCD_Clear
                           _LCD_Init
                         _LCD_String
                      _LCD_String_xy
                            _MSdelay
                  _RTC_Read_Calendar
                     _RTC_Read_Clock
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    17      6    1851
                                              7 COMRAM    14     8      6
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _RTC_Read_Clock                                       2     2      0     177
                                              2 COMRAM     2     2      0
                           _I2C_Read
                 _I2C_Repeated_Start
                          _I2C_Start
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _RTC_Read_Calendar                                    2     2      0     177
                                              2 COMRAM     2     2      0
                           _I2C_Read
                 _I2C_Repeated_Start
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            1     1      0      44
                                              1 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Repeated_Start                                   1     1      0      44
                                              1 COMRAM     1     1      0
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      22
                                              0 COMRAM     1     1      0
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             2     2      0      45
                                              0 COMRAM     2     2      0
                            _I2C_Ack
                           _I2C_Nack
                          _I2C_Ready
 ---------------------------------------------------------------------------------
 (3) _I2C_Ready                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Nack                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        5     2      3    2884
                                             10 COMRAM     5     2      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2    1525
                                              8 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             2     2      0     584
                                              6 COMRAM     2     2      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    1124
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0    1124
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0     584
                                              6 COMRAM     2     2      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _MSdelay                                              6     4      2     540
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Init
   _I2C_Stop
   _LCD_Clear
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String
     _LCD_Char
       _MSdelay
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay
   _MSdelay
   _RTC_Read_Calendar
     _I2C_Read
       _I2C_Ack
       _I2C_Nack
       _I2C_Ready
     _I2C_Repeated_Start
       _I2C_Write
         _I2C_Ready
     _I2C_Start
       _I2C_Write
         _I2C_Ready
     _I2C_Stop
     _I2C_Write
       _I2C_Ready
   _RTC_Read_Clock
     _I2C_Read
       _I2C_Ack
       _I2C_Nack
       _I2C_Ready
     _I2C_Repeated_Start
       _I2C_Write
         _I2C_Ready
     _I2C_Start
       _I2C_Write
         _I2C_Ready
     _I2C_Write
       _I2C_Ready
   _sprintf
     ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      13       5       11.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5D      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      72      20        0.0%
DATA                 0      0      72       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue May 23 17:29:26 2017

                    __size_of_I2C_Ready 0008                      __size_of_I2C_Start 0016  
                          ?_LCD_Command 0001                             _SSPSTATbits 000FC7  
                    __size_of_I2C_Write 0016                             __CFG_BOR$ON 000000  
                           __CFG_BORV$3 000000                             ?_LCD_String 0009  
RTC_Read_Calendar@read_calendar_address 0004                            __CFG_CP0$OFF 000000  
                          __CFG_CP1$OFF 000000                            __CFG_CP2$OFF 000000  
                          __CFG_CP3$OFF 000000                                     l204 0FA4  
                                   l222 0FB0                                     l216 0FBA  
                                   l160 0F12                                     l171 0FC0  
                                   l164 0F2A                                     l244 0BD4  
                                   l195 0F66                                     l188 0F50  
                                   l653 0CFE                            __CFG_CPB$OFF 000000  
                                   u500 0D2A                                     u510 0D52  
                                   _PEN 007E2A                            __CFG_CPD$OFF 000000  
                                   u507 0D20                                     u517 0D48  
                                   u631 0864                                     u644 08A8  
                                   u645 08A2                                     u664 08D2  
                                   u665 08CC                                     _Day 0062  
                       __end_of_I2C_Ack 0FC0                                     _min 0068  
                                   _sec 006A                                     wreg 000FE8  
                          __CFG_LVP$OFF 000000                             LCD_Char@dat 0008  
                          __CFG_WDT$OFF 000000                                    l1210 0EB2  
                                  l1220 0ECC                                    l1212 0EBA  
                                  l1222 0ED0                                    l1302 0D0A  
                                  l1306 0D32                                    l1402 0E8C  
                                  l1410 0B4E                                    l1406 0E9A  
                                  l1238 0F8A                                    l1334 0CCC  
                                  l1510 0A1A                                    l1336 0CD4  
                                  l1440 0BDA                                    l1416 0B68  
                                  l1346 0CF4                                    l1338 0CD8  
                                  l1450 0C36                                    l1530 0AC0  
                                  l1292 0F26                                    l1428 0BA8  
                                  l1452 0C4E                                    l1532 0ACE  
                                  l1534 0ADC                                    l1526 0AA4  
                                  l1542 0B06                                    l1470 0888  
                                  l1448 0C2E                                    l1536 0AEA  
                                  l1528 0AB2                                    l1480 08FA  
                                  l1538 0AF8                                    l1482 090C  
                                  l1496 0994                                    STR_1 084D  
                                  STR_2 084A                                    STR_3 082A  
                                  STR_4 0826                                    STR_5 0822  
                                  STR_6 082A                                    STR_7 0826  
                                  STR_8 0822                                    STR_9 081A  
                                  _LATD 000F8C                                    _RCEN 007E2B  
                                  _RSEN 007E29                                    _Date 0060  
                                  _Year 0066                          main@Clock_type 005C  
                                  _main 0852                         ?_RTC_Read_Clock 0001  
                                  _hour 005E                        __end_of_I2C_Nack 0FB6  
                    __size_of_LCD_Clear 0014                        __end_of_I2C_Init 0F4C  
                      __end_of_I2C_Read 0F32                                    fsr0h 000FEA  
                                  indf0 000FEF                                    fsr2h 000FDA  
                                  fsr0l 000FE9                                    indf2 000FDF  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                      __end_of_I2C_Stop 0FAC                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0000  
                       __end_of_MSdelay 0EDE                           __CFG_IESO$OFF 000000  
                         _LCD_String_xy 0E70                            ___param_bank 000000  
      RTC_Read_Clock@read_clock_address 0004                        __end_of_LCD_Char 0DA6  
                      __end_of_LCD_Init 0F0E                           __CFG_PLLDIV$1 000000  
                        __CFG_CCP2MX$ON 000000                                   ?_main 0001  
                                 _ACKEN 007E2C                                   _ACKDT 007E2D  
                                 STR_10 081E                                   STR_11 082A  
                                 STR_12 083E                                   STR_13 083A  
                                 STR_14 0832                                   STR_15 082E  
                                 STR_16 0846                                   STR_17 0836  
                                 STR_18 0842                                   STR_19 0809  
                                 _LATD2 007C62                                   _LATD3 007C63  
                       __end_of___lwdiv 0D08                           __CFG_USBDIV$1 000000  
                                 _TRISD 000F95                                   _SSPIE 007CEB  
                                 _SSPIF 007CF3                           __CFG_PWRT$OFF 000000  
                         __CFG_WRT0$OFF 000000                           __CFG_WRT1$OFF 000000  
                         __CFG_WRT2$OFF 000000                           __CFG_WRT3$OFF 000000  
                        __CFG_EBTR0$OFF 000000                          __CFG_FCMEN$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _Month 0064  
                         __CFG_WRTB$OFF 000000                           __CFG_WRTC$OFF 000000  
                         __CFG_WRTD$OFF 000000                          __CFG_EBTRB$OFF 000000  
                     __end_of_I2C_Ready 0FC8                       __end_of_I2C_Start 0F62  
                     __end_of_I2C_Write 0F8E                                   tablat 000FF5  
                                 plusw1 000FE3                                   plusw2 000FDB  
                                 status 000FD8                     __size_of_LCD_String 0052  
                       __end_of_sprintf 0C5C                          __CFG_ICPRT$OFF 000000  
                        ?_LCD_String_xy 000B                          __CFG_MCLRE$OFF 000000  
                       __initialization 0E36                            __end_of_main 0B44  
                             ??_I2C_Ack 0001                                  ??_main 0016  
                     __end_of_LCD_Clear 0FA2                           __activetblptr 000002  
                      LCD_String_xy@msg 000C                        LCD_String_xy@pos 000B  
                      LCD_String_xy@row 000E                               ??_MSdelay 0003  
                                _OSCCON 000FD3                                  _SSPADD 000FC8  
                                _TRISB0 007C98                                  _TRISB1 007C99  
                                _SSPBUF 000FC9                          __CFG_XINST$OFF 000000  
                        __CFG_STVREN$ON 000000                               ??___lwdiv 0005  
                                clear_0 0E5C                      _I2C_Repeated_Start 0F62  
                  __size_of_LCD_Command 004C                               ?_I2C_Nack 0001  
                             ?_I2C_Init 0001                               ?_I2C_Read 0001  
                             ?_I2C_Stop 0001                            __mediumconst 0000  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                     ?_I2C_Repeated_Start 0001  
                             ??_sprintf 000E                               ?_LCD_Char 0001  
                            __accesstop 0060                 __end_of__initialization 0E66  
                             ?_LCD_Init 0001                         __CFG_PBADEN$OFF 000000  
                       ??_LCD_String_xy 000E                           ___rparam_used 000001  
                  ??_I2C_Repeated_Start 0002                          __pcstackCOMRAM 0001  
                          __pidataBANK0 0FC8                            ??_LCD_String 000B  
                            ??_I2C_Nack 0001                              ??_I2C_Init 0001  
                            ??_I2C_Read 0001                              ??_I2C_Stop 0001  
                      ??_RTC_Read_Clock 0003                              __pbssBANK0 0060  
                            ??_LCD_Char 0007                              ??_LCD_Init 0009  
                    __end_of_LCD_String 0D5A                            I2C_Read@flag 0001  
                        I2C_Read@buffer 0002                                 _I2C_Ack 0FB6  
                               _ACKSTAT 007E2E                                 _SSPCON1 000FC6  
                               _SSPCON2 000FC5                                 _SSPSTAT 000FC7  
                               _MSdelay 0EA8                         __CFG_VREGEN$OFF 000000  
                             _I2C_Ready 0FC0                               _I2C_Start 0F4C  
                             _I2C_Write 0F78                           LCD_String@msg 0009  
                               __Hparam 0000                                 __Lparam 0000  
                     _RTC_Read_Calendar 0C5C                                 ___lwdiv 0CB6  
                          __psmallconst 0800                      ?_RTC_Read_Calendar 0001  
                               __pcinit 0E36                                 __ramtop 0800  
                               __ptext0 0852                                 __ptext1 0B44  
                               __ptext2 0CB6                                 __ptext3 0DF2  
                               __ptext4 0C5C                                 __ptext5 0FA2  
                               __ptext6 0F4C                                 __ptext7 0F62  
                               __ptext8 0F78                                 __ptext9 0F0E  
                     __end_of_hexpowers 0809                     ??_RTC_Read_Calendar 0003  
                             _LCD_Clear 0F8E                                 _sprintf 0B44  
                  end_of_initialization 0E66                          LCD_Command@cmd 0008  
                         __Lmediumconst 0000                              ?_I2C_Ready 0001  
                            ?_I2C_Start 0001                              ?_I2C_Write 0001  
             __end_of_RTC_Read_Calendar 0CB6                                 postdec1 000FE5  
                               postdec2 000FDD                                 postinc0 000FEE  
                               postinc2 000FDE                              ?_LCD_Clear 0001  
                     __size_of_I2C_Nack 000A                       __size_of_I2C_Init 001A  
                     __size_of_I2C_Read 0024                       __size_of_I2C_Stop 000A  
                     __size_of_LCD_Char 004C                       __size_of_LCD_Init 0030  
                         ??_LCD_Command 0007                     start_initialization 0E36  
  I2C_Repeated_Start@slave_read_address 0002                             ??_I2C_Ready 0001  
                           ??_I2C_Start 0002                             ??_I2C_Write 0001  
                 __end_of_LCD_String_xy 0EA8              __size_of_RTC_Read_Calendar 005A  
           __size_of_I2C_Repeated_Start 0016                             __pdataBANK0 006C  
                      __CFG_LPT1OSC$OFF 000000                                ?_I2C_Ack 0001  
                   __end_of_LCD_Command 0DF2                             __pbssCOMRAM 005E  
                           ??_LCD_Clear 0009                                ?_MSdelay 0001  
                           sprintf@flag 000E                             sprintf@prec 0014  
                      ___lwdiv@dividend 0001                                ?___lwdiv 0001  
                           __smallconst 0800                                _I2C_Nack 0FAC  
                              _I2C_Init 0F32                                _I2C_Read 0F0E  
                              _I2C_Stop 0FA2                               _hexpowers 0801  
                      ___lwdiv@quotient 0005                   LCD_String_xy@location 000F  
                              ?_sprintf 0008                                MSdelay@i 0003  
                              MSdelay@j 0005                                _LCD_Char 0D5A  
                              _LCD_Init 0EDE                 __size_of_RTC_Read_Clock 0044  
                      __CFG_WDTPS$32768 000000                               main@F3898 006C  
                             main@AM_PM 005D                             _LCD_Command 0DA6  
                      __size_of_I2C_Ack 000A                               main@hours 0052  
                             main@month 002A                               copy_data0 0E4A  
          I2C_Start@slave_write_address 0002                        __size_of_MSdelay 0036  
                              __Hrparam 0000                                __Lrparam 0000  
                         I2C_Write@data 0001                        __size_of___lwdiv 0052  
                            sprintf@idx 0011                              sprintf@val 0012  
                       ___lwdiv@divisor 0003                         ___lwdiv@counter 0007  
                              __ptext10 0FC0                                __ptext11 0FAC  
                              __ptext20 0F32                                __ptext12 0FB6  
                              __ptext13 0E70                                __ptext14 0D08  
                              __ptext15 0D5A                                __ptext16 0EDE  
                              __ptext17 0F8E                                __ptext18 0DA6  
                              __ptext19 0EA8                        __size_of_sprintf 0118  
                         __size_of_main 02F2                              MSdelay@val 0001  
                              main@date 0020                                main@days 0019  
                              main@mins 0048                                main@secs 003E  
                              main@year 0034                              _LCD_String 0D08  
                 __CFG_CPUDIV$OSC1_PLL2 000000                               sprintf@ap 000F  
                             sprintf@sp 0008              __end_of_I2C_Repeated_Start 0F78  
                        _RTC_Read_Clock 0DF2                     __CFG_FOSC$INTOSC_EC 000000  
                              sprintf@c 0015                                sprintf@f 000A  
                __size_of_LCD_String_xy 0038                             _SSPCON2bits 000FC5  
                __end_of_RTC_Read_Clock 0E36  
